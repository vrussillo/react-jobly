{"version":3,"sources":["hooks/useLocalStorage.js","auth/UserContext.js","routes-nav/Navigation.js","homepage/Homepage.js","common/SearchForm.js","api/api.js","companies/CompanyCard.js","common/LoadingSpinner.js","companies/CompanyList.js","jobs/JobCard.js","jobs/JobCardList.js","jobs/JobList.js","companies/CompanyDetail.js","common/Alert.js","auth/LoginForm.js","profiles/ProfileForm.js","auth/SignupForm.js","routes-nav/PrivateRoute.js","routes-nav/Routes.js","App.js","serviceWorker.js","index.js"],"names":["useLocalStorage","key","firstValue","arguments","length","undefined","initialValue","localStorage","getItem","_useState","useState","_useState2","Object","slicedToArray","item","setItem","useEffect","console","debug","removeItem","UserContext","React","createContext","Navigation","_ref","logout","currentUser","useContext","react_default","a","createElement","className","react_router_dom","to","onClick","first_name","username","Homepage","firstName","SearchForm","searchFor","searchTerm","setSearchTerm","onSubmit","evt","preventDefault","trim","name","placeholder","value","onChange","target","type","BASE_URL","process","REACT_APP_BASE_URL","JoblyApi","_callee","endpoint","data","method","url","headers","params","message","_args","regenerator_default","wrap","_context","prev","next","concat","Authorization","token","axios","abrupt","sent","t0","error","response","Array","isArray","stop","_callee2","res","_context2","this","request","user","_callee3","_context3","companies","_callee4","handle","_context4","company","_callee5","title","_context5","jobs","_callee6","id","_context6","_callee7","_context7","_callee8","_context8","_callee9","_context9","CompanyCard","description","logoUrl","src","alt","LoadingSpinner","CompanyList","setCompanies","search","_x","_search","apply","asyncToGenerator","mark","getCompanies","common_SearchForm","map","c","companies_CompanyCard","common_LoadingSpinner","JobCard","salary","equity","companyName","_useContext","hasAppliedToJob","applyToJob","applied","setApplied","_handleApply","digitsRev","salaryStr","toString","i","push","reverse","join","formatSalary","disabled","JobCardList","job","jobs_JobCard","JobList","setJobs","getJobs","jobs_JobCardList","CompanyDetail","useParams","setCompany","_getCompany","getCompany","t1","Alert","_ref$type","_ref$messages","messages","role","LoginForm","login","history","useHistory","password","formData","setFormData","_useState3","_useState4","formErrors","setFormErrors","handleSubmit","_handleSubmit","result","success","errors","handleChange","_evt$target","l","objectSpread2","defineProperty","autoComplete","required","common_Alert","ProfileForm","setCurrentUser","lastName","email","_useState5","_useState6","saveConfirmed","setSaveConfirmed","profileData","updatedUser","saveProfile","f","SignupForm","signup","PrivateRoute","exact","path","children","react_router","Routes","register","homepage_Homepage","auth_LoginForm","auth_SignupForm","routes_nav_PrivateRoute","companies_CompanyList","jobs_JobList","companies_CompanyDetail","profiles_ProfileForm","TOKEN_STORAGE_ID","App","infoLoaded","setInfoLoaded","Set","applicationIds","setApplicationIds","_useLocalStorage","_useLocalStorage2","setToken","_signup","signupData","_token","_login","loginData","_token2","has","_getCurrentUser","_jwt$decode","_currentUser","jwt","decode","getCurrentUser","applications","auth_UserContext","Provider","toConsumableArray","routes_nav_Navigation","routes_nav_Routes","_x2","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"spBAmCeA,MAlBf,SAAyBC,GAAwB,IAAnBC,EAAmBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,KACnCG,EAAeC,aAAaC,QAAQP,IAAQC,EAElDO,EAAwBC,mBAASJ,GAAjCK,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAOK,EAAPH,EAAA,GAAaI,EAAbJ,EAAA,GAYA,OAVAK,oBAAU,WACRC,QAAQC,MAAM,kCAAmC,QAASJ,GAE7C,OAATA,EACFP,aAAaY,WAAWlB,GAExBM,aAAaQ,QAAQd,EAAKa,IAE3B,CAACb,EAAKa,IAEF,CAACA,EAAMC,IC1BDK,EAFKC,IAAMC,uBCmEXC,MA1Df,SAAAC,GAAgC,IAAVC,EAAUD,EAAVC,OACZC,EAAgBC,qBAAWP,GAA3BM,YA+CR,OA9CAT,QAAQC,MAAM,aAAc,eAAgBQ,GA+CxCE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,eAAeE,GAAG,KAAlC,SAGCP,EA/CDE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACZH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASD,UAAU,WAAWE,GAAG,cAAjC,cAIFL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACZH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASD,UAAU,WAAWE,GAAG,SAAjC,SAIFL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACZH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASD,UAAU,WAAWE,GAAG,YAAjC,YAIFL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,WAAWE,GAAG,IAAIC,QAAST,GAA3C,WACWC,EAAYS,YAAcT,EAAYU,YASrDR,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACZH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASD,UAAU,WAAWE,GAAG,UAAjC,UAIFL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACZH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASD,UAAU,WAAWE,GAAG,WAAjC,6BCTGI,MA9Bf,WACE,IAAQX,EAAgBC,qBAAWP,GAA3BM,YAGR,OAFAT,QAAQC,MAAM,WAAY,eAAgBQ,GAGtCE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAAd,SACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,0CACCL,EACKE,EAAAC,EAAAC,cAAA,2BACeJ,EAAYY,WAAaZ,EAAYU,SADpD,KAIER,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,wCACVE,GAAG,UADT,UAIAL,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,mCACVE,GAAG,WADT,sBCkBLM,MApCf,SAAAf,GAAmC,IAAbgB,EAAahB,EAAbgB,UACpBvB,QAAQC,MAAM,aAAc,oBAAqBsB,GAEjD,IAAA/B,EAAoCC,mBAAS,IAA7CC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAOgC,EAAP9B,EAAA,GAAmB+B,EAAnB/B,EAAA,GAeA,OACIiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcY,SAdpC,SAAsBC,GAEpBA,EAAIC,iBACJL,EAAUC,EAAWK,aAAUzC,GAC/BqC,EAAcD,EAAWK,UAWnBlB,EAAAC,EAAAC,cAAA,SACIC,UAAU,2CACVgB,KAAK,aACLC,YAAY,sBACZC,MAAOR,EACPS,SAZZ,SAAsBN,GACpBF,EAAcE,EAAIO,OAAOF,UAanBrB,EAAAC,EAAAC,cAAA,UAAQsB,KAAK,SAASrB,UAAU,0BAAhC,iDCzCJsB,EAAWC,8CAAYC,oBAAsB,wBA2FpCC,oIA7Eb,SAAAC,EAAqBC,GAArB,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA9D,UAAA,OAAA+D,EAAArC,EAAAsC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAA+BX,EAA/BM,EAAA7D,OAAA,QAAAC,IAAA4D,EAAA,GAAAA,EAAA,GAAsC,GAAIL,EAA1CK,EAAA7D,OAAA,QAAAC,IAAA4D,EAAA,GAAAA,EAAA,GAAmD,MACjDhD,QAAQC,MAAM,YAAawC,EAAUC,EAAMC,GAErCC,EAHR,GAAAU,OAGiBlB,EAHjB,KAAAkB,OAG6Bb,GACrBI,EAAU,CAAEU,cAAa,UAAAD,OAAYf,EAASiB,QAC9CV,EAAqB,QAAXH,EACVD,EACA,GAPRS,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAUkBI,IAAM,CAAEb,MAAKD,SAAQD,OAAMI,SAAQD,YAVrD,cAAAM,EAAAO,OAAA,SAAAP,EAAAQ,KAUiEjB,MAVjE,cAAAS,EAAAC,KAAA,GAAAD,EAAAS,GAAAT,EAAA,SAYInD,QAAQ6D,MAAM,aAAcV,EAAAS,GAAIE,UAC5Bf,EAAUI,EAAAS,GAAIE,SAASpB,KAAKmB,MAAMd,QAChCgB,MAAMC,QAAQjB,GAAWA,EAAU,CAACA,GAd9C,yBAAAI,EAAAc,SAAAzB,EAAA,2IAsBA,SAAA0B,EAA4B/C,GAA5B,IAAAgD,EAAA,OAAAlB,EAAArC,EAAAsC,KAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,cAAAe,EAAAf,KAAA,EACkBgB,KAAKC,QAAL,SAAAhB,OAAsBnC,IADxC,cACMgD,EADNC,EAAAT,KAAAS,EAAAV,OAAA,SAESS,EAAII,MAFb,wBAAAH,EAAAH,SAAAC,EAAAG,gIAOA,SAAAG,EAA0B1C,GAA1B,IAAAqC,EAAA,OAAAlB,EAAArC,EAAAsC,KAAA,SAAAuB,GAAA,cAAAA,EAAArB,KAAAqB,EAAApB,MAAA,cAAAoB,EAAApB,KAAA,EACkBgB,KAAKC,QAAQ,YAAa,CAAExC,SAD9C,cACMqC,EADNM,EAAAd,KAAAc,EAAAf,OAAA,SAESS,EAAIO,WAFb,wBAAAD,EAAAR,SAAAO,EAAAH,8HAOA,SAAAM,EAAwBC,GAAxB,IAAAT,EAAA,OAAAlB,EAAArC,EAAAsC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAAAwB,EAAAxB,KAAA,EACkBgB,KAAKC,QAAL,aAAAhB,OAA0BsB,IAD5C,cACMT,EADNU,EAAAlB,KAAAkB,EAAAnB,OAAA,SAESS,EAAIW,SAFb,wBAAAD,EAAAZ,SAAAU,EAAAN,2HAOA,SAAAU,EAAqBC,GAArB,IAAAb,EAAA,OAAAlB,EAAArC,EAAAsC,KAAA,SAAA+B,GAAA,cAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,cAAA4B,EAAA5B,KAAA,EACkBgB,KAAKC,QAAQ,OAAQ,CAAEU,UADzC,cACMb,EADNc,EAAAtB,KAAAsB,EAAAvB,OAAA,SAESS,EAAIe,MAFb,wBAAAD,EAAAhB,SAAAc,EAAAV,8HAOA,SAAAc,EAAwBhE,EAAUiE,GAAlC,OAAAnC,EAAArC,EAAAsC,KAAA,SAAAmC,GAAA,cAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,cAAAgC,EAAAhC,KAAA,EACQgB,KAAKC,QAAL,SAAAhB,OAAsBnC,EAAtB,UAAAmC,OAAuC8B,GAAM,GAAI,QADzD,wBAAAC,EAAApB,SAAAkB,EAAAd,2HAMA,SAAAiB,EAAmB5C,GAAnB,IAAAyB,EAAA,OAAAlB,EAAArC,EAAAsC,KAAA,SAAAqC,GAAA,cAAAA,EAAAnC,KAAAmC,EAAAlC,MAAA,cAAAkC,EAAAlC,KAAA,EACkBgB,KAAKC,QAAL,aAA2B5B,EAAM,QADnD,cACMyB,EADNoB,EAAA5B,KAAA4B,EAAA7B,OAAA,SAESS,EAAIX,OAFb,wBAAA+B,EAAAtB,SAAAqB,EAAAjB,0HAOA,SAAAmB,EAAoB9C,GAApB,IAAAyB,EAAA,OAAAlB,EAAArC,EAAAsC,KAAA,SAAAuC,GAAA,cAAAA,EAAArC,KAAAqC,EAAApC,MAAA,cAAAoC,EAAApC,KAAA,EACkBgB,KAAKC,QAAL,gBAA8B5B,EAAM,QADtD,cACMyB,EADNsB,EAAA9B,KAAA8B,EAAA/B,OAAA,SAESS,EAAIX,OAFb,wBAAAiC,EAAAxB,SAAAuB,EAAAnB,+HAOA,SAAAqB,EAAyBvE,EAAUuB,GAAnC,IAAAyB,EAAA,OAAAlB,EAAArC,EAAAsC,KAAA,SAAAyC,GAAA,cAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,cAAAsC,EAAAtC,KAAA,EACkBgB,KAAKC,QAAL,SAAAhB,OAAsBnC,GAAYuB,EAAM,SAD1D,cACMyB,EADNwB,EAAAhC,KAAAgC,EAAAjC,OAAA,SAESS,EAAII,MAFb,wBAAAoB,EAAA1B,SAAAyB,EAAArB,gFCxDauB,MAlBf,SAAArF,GAA6D,IAAtCuB,EAAsCvB,EAAtCuB,KAAM+D,EAAgCtF,EAAhCsF,YAAaC,EAAmBvF,EAAnBuF,QAASlB,EAAUrE,EAAVqE,OAGjD,OAFA5E,QAAQC,MAAM,cAAe6F,GAGzBnF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,mBAAmBE,GAAE,cAAAsC,OAAgBsB,IACnDjE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACXgB,EACAgE,GAAWnF,EAAAC,EAAAC,cAAA,OAAKkF,IAAKD,EACLE,IAAKlE,EACLhB,UAAU,sBAE7BH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,aAAQgF,cCXNI,MARf,WACE,OACItF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,gBCkDSoF,MAzCf,WACElG,QAAQC,MAAM,eAEd,IAAAT,EAAkCC,mBAAS,MAA3CC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAOkF,EAAPhF,EAAA,GAAkByG,EAAlBzG,EAAA,GAHqB,SAWN0G,EAXMC,GAAA,OAAAC,EAAAC,MAAAlC,KAAAnF,WAAA,SAAAoH,IAAA,OAAAA,EAAA3G,OAAA6G,EAAA,EAAA7G,CAAAsD,EAAArC,EAAA6F,KAWrB,SAAAjE,EAAsBV,GAAtB,IAAA4C,EAAA,OAAAzB,EAAArC,EAAAsC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACwBd,EAASmE,aAAa5E,GAD9C,OACM4C,EADNvB,EAAAQ,KAEEwC,EAAazB,GAFf,wBAAAvB,EAAAc,SAAAzB,OAXqB+D,MAAAlC,KAAAnF,WAgBrB,OAXAa,oBAAU,WACRC,QAAQC,MAAM,6CACdmG,KACC,IAQE1B,EAGD/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCACbH,EAAAC,EAAAC,cAAC8F,EAAD,CAAYpF,UAAW6E,IACtB1B,EAAUvF,OAEHwB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACZ4D,EAAUkC,IAAI,SAAAC,GAAC,OACZlG,EAAAC,EAAAC,cAACiG,EAAD,CACI9H,IAAK6H,EAAEjC,OACPA,OAAQiC,EAAEjC,OACV9C,KAAM+E,EAAE/E,KACR+D,YAAagB,EAAEhB,YACfC,QAASe,EAAEf,aAKrBnF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,kCAnBSH,EAAAC,EAAAC,cAACkG,EAAD,cCkCVC,MArDf,SAAAzG,GAA6D,IAA1C6E,EAA0C7E,EAA1C6E,GAAIJ,EAAsCzE,EAAtCyE,MAAOiC,EAA+B1G,EAA/B0G,OAAQC,EAAuB3G,EAAvB2G,OAAQC,EAAe5G,EAAf4G,YAC5CnH,QAAQC,MAAM,WAEd,IAAAmH,EAAwC1G,qBAAWP,GAA3CkH,EAARD,EAAQC,gBAAiBC,EAAzBF,EAAyBE,WACzB9H,EAA8BC,qBAA9BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAO+H,EAAP7H,EAAA,GAAgB8H,EAAhB9H,EAAA,GAJ2D,SAAA+H,IAAA,OAAAA,EAAA9H,OAAA6G,EAAA,EAAA7G,CAAAsD,EAAArC,EAAA6F,KAa3D,SAAAjE,EAA2Bb,GAA3B,OAAAsB,EAAArC,EAAAsC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACMgE,EAAgBjC,GADtB,CAAAjC,EAAAE,KAAA,eAAAF,EAAAO,OAAA,iBAEE4D,EAAWlC,GACXoC,GAAW,GAHb,wBAAArE,EAAAc,SAAAzB,OAb2D+D,MAAAlC,KAAAnF,WAmB3D,OAbAkB,IAAML,UAAU,WACdC,QAAQC,MAAM,wCAAyC,MAAOmF,GAE9DoC,EAAWH,EAAgBjC,KAC1B,CAACA,EAAIiC,IAUJ1G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,IAAgCyG,EAC9B5G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAckE,GAC5BrE,EAAAC,EAAAC,cAAA,SAAIsG,GACHF,GAAUtG,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,wBAgB1B,SAAsBoG,GAIpB,IAHA,IAAMS,EAAY,GACZC,EAAYV,EAAOW,WAEhBC,EAAIF,EAAUxI,OAAS,EAAG0I,GAAK,EAAGA,IACzCH,EAAUI,KAAKH,EAAUE,IACrBA,EAAI,GAAKA,EAAI,IAAM,GAAGH,EAAUI,KAAK,KAG3C,OAAOJ,EAAUK,UAAUC,KAAK,IAzBQC,CAAahB,UACjC7H,IAAX8H,GAAwBvG,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,wBAAgBqG,IAC9CvG,EAAAC,EAAAC,cAAA,UACIC,UAAU,6DACVG,QA5B+C,SAAAoF,GAAA,OAAAoB,EAAAlB,MAAAlC,KAAAnF,YA6B/CgJ,SAAUX,GAEXA,EAAU,UAAY,YCZpBY,MAnBf,SAAA5H,GAAsC,IAAf2E,EAAe3E,EAAf2E,KAGrB,OAHoC3E,EAATgG,MAC3BvG,QAAQC,MAAM,cAAe,QAASiF,GAGlCvE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACZoE,EAAK0B,IAAI,SAAAwB,GAAG,OACTzH,EAAAC,EAAAC,cAACwH,EAAD,CACIrJ,IAAKoJ,EAAIhD,GACTA,GAAIgD,EAAIhD,GACRJ,MAAOoD,EAAIpD,MACXiC,OAAQmB,EAAInB,OACZC,OAAQkB,EAAIlB,OACZC,YAAaiB,EAAIjB,kBCoBlBmB,MA7Bf,WACEtI,QAAQC,MAAM,WAEd,IAAAT,EAAwBC,mBAAS,MAAjCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAO0F,EAAPxF,EAAA,GAAa6I,EAAb7I,EAAA,GAHiB,SAWF0G,EAXEC,GAAA,OAAAC,EAAAC,MAAAlC,KAAAnF,WAAA,SAAAoH,IAAA,OAAAA,EAAA3G,OAAA6G,EAAA,EAAA7G,CAAAsD,EAAArC,EAAA6F,KAWjB,SAAAjE,EAAsBwC,GAAtB,IAAAE,EAAA,OAAAjC,EAAArC,EAAAsC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACmBd,EAASiG,QAAQxD,GADpC,OACME,EADN/B,EAAAQ,KAEE4E,EAAQrD,GAFV,wBAAA/B,EAAAc,SAAAzB,OAXiB+D,MAAAlC,KAAAnF,WAgBjB,OAXAa,oBAAU,WACRC,QAAQC,MAAM,uCACdmG,KACC,IAQElB,EAGDvE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAC8F,EAAD,CAAQpF,UAAW6E,IAClBlB,EAAK/F,OACAwB,EAAAC,EAAAC,cAAC4H,EAAD,CAAavD,KAAMA,IACnBvE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,kCAPMH,EAAAC,EAAAC,cAACkG,EAAD,OCQL2B,MAzBf,WACE,IAAQ9D,EAAW+D,cAAX/D,OACR5E,QAAQC,MAAM,gBAAiB,UAAW2E,GAE1C,IAAApF,EAA8BC,mBAAS,MAAvCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAOsF,EAAPpF,EAAA,GAAgBkJ,EAAhBlJ,EAAA,GAUA,OARAK,oBAAU,WAAoC,SAAA8I,IAAA,OAAAA,EAAAlJ,OAAA6G,EAAA,EAAA7G,CAAAsD,EAAArC,EAAA6F,KAC5C,SAAAjE,IAAA,OAAAS,EAAArC,EAAAsC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAS,GACEgF,EADFzF,EAAAE,KAAA,EACmBd,EAASuG,WAAWlE,GADvC,OAAAzB,EAAA4F,GAAA5F,EAAAQ,MAAA,EAAAR,EAAAS,IAAAT,EAAA4F,IAAA,wBAAA5F,EAAAc,SAAAzB,OAD4C+D,MAAAlC,KAAAnF,YAAA,WAAA2J,EAAAtC,MAAAlC,KAAAnF,WAK5C4J,IACC,CAAClE,IAECE,EAGDnE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACbH,EAAAC,EAAAC,cAAA,UAAKiE,EAAQhD,MACbnB,EAAAC,EAAAC,cAAA,SAAIiE,EAAQe,aACZlF,EAAAC,EAAAC,cAAC4H,EAAD,CAAavD,KAAMJ,EAAQI,QANZvE,EAAAC,EAAAC,cAACkG,EAAD,uBCRRiC,MAdf,SAAAzI,GAAmD,IAAA0I,EAAA1I,EAAlC4B,YAAkC,IAAA8G,EAA3B,SAA2BA,EAAAC,EAAA3I,EAAjB4I,gBAAiB,IAAAD,EAAN,GAAMA,EAGjD,OAFAlJ,QAAQC,MAAM,QAAS,QAASkC,EAAM,YAAagH,GAG/CxI,EAAAC,EAAAC,cAAA,OAAKC,UAAS,eAAAwC,OAAiBnB,GAAQiH,KAAK,SACzCD,EAASvC,IAAI,SAAA/C,GAAK,OACflD,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAa9B,IAAK6E,GAC5BA,OCuFAwF,MAtFf,SAAA9I,GAA8B,IAAT+I,EAAS/I,EAAT+I,MACbC,EAAUC,cAChBhK,EAAgCC,mBAAS,CACvC0B,SAAU,GACVsI,SAAU,KAFZ/J,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAOkK,EAAPhK,EAAA,GAAiBiK,EAAjBjK,EAAA,GAIAkK,EAAoCnK,mBAAS,IAA7CoK,EAAAlK,OAAAC,EAAA,EAAAD,CAAAiK,EAAA,GAAOE,EAAPD,EAAA,GAAmBE,EAAnBF,EAAA,GAN4B,SAoBbG,EApBa3D,GAAA,OAAA4D,EAAA1D,MAAAlC,KAAAnF,WAAA,SAAA+K,IAAA,OAAAA,EAAAtK,OAAA6G,EAAA,EAAA7G,CAAAsD,EAAArC,EAAA6F,KAoB5B,SAAAjE,EAA4Bb,GAA5B,IAAAuI,EAAA,OAAAjH,EAAArC,EAAAsC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACE1B,EAAIC,iBADNuB,EAAAE,KAAA,EAEqBiG,EAAMI,GAF3B,QAEMQ,EAFN/G,EAAAQ,MAGawG,QACTZ,EAAQzB,KAAK,cAEbiC,EAAcG,EAAOE,QANzB,wBAAAjH,EAAAc,SAAAzB,OApB4B+D,MAAAlC,KAAAnF,WA+B5B,SAASmL,EAAa1I,GACpB,IAAA2I,EAAwB3I,EAAIO,OAApBJ,EAARwI,EAAQxI,KAAME,EAAdsI,EAActI,MACd2H,EAAY,SAAAY,GAAC,OAAA5K,OAAA6K,EAAA,EAAA7K,QAAA6K,EAAA,EAAA7K,CAAA,GAAU4K,GAAV,GAAA5K,OAAA8K,EAAA,EAAA9K,CAAA,GAAcmC,EAAOE,MAGpC,OA5BAhC,QAAQC,MACJ,YACA,gBAAiBqJ,EACjB,YAAaI,EACb,aAAcI,GAyBdnJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,UAEAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMa,SAAUsI,GACdrJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,SACIiB,KAAK,WACLhB,UAAU,eACVkB,MAAO0H,EAASvI,SAChBc,SAAUoI,EACVK,aAAa,WACbC,UAAQ,KAGdhK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,SACIsB,KAAK,WACLL,KAAK,WACLhB,UAAU,eACVkB,MAAO0H,EAASD,SAChBxH,SAAUoI,EACVK,aAAa,mBACbC,UAAQ,KAIbb,EAAW3K,OACNwB,EAAAC,EAAAC,cAAC+J,EAAD,CAAOzI,KAAK,SAASgH,SAAUW,IAC/B,KAENnJ,EAAAC,EAAAC,cAAA,UACIC,UAAU,8BACVY,SAAUsI,GAFd,gBC2EDa,MA5If,WACE,IAAAzD,EAAwC1G,qBAAWP,GAA3CM,EAAR2G,EAAQ3G,YAAaqK,EAArB1D,EAAqB0D,eACrBtL,EAAgCC,mBAAS,CACvC4B,UAAWZ,EAAYY,UACvB0J,SAAUtK,EAAYsK,SACtBC,MAAOvK,EAAYuK,MACnB7J,SAAUV,EAAYU,SACtBsI,SAAU,KALZ/J,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAOkK,EAAPhK,EAAA,GAAiBiK,EAAjBjK,EAAA,GAOAkK,EAAoCnK,mBAAS,IAA7CoK,EAAAlK,OAAAC,EAAA,EAAAD,CAAAiK,EAAA,GAAOE,EAAPD,EAAA,GAAmBE,EAAnBF,EAAA,GAGAoB,EAA0CxL,oBAAS,GAAnDyL,EAAAvL,OAAAC,EAAA,EAAAD,CAAAsL,EAAA,GAAOE,EAAPD,EAAA,GAAsBE,EAAtBF,EAAA,GAZqB,SAAAjB,IAAA,OAAAA,EAAAtK,OAAA6G,EAAA,EAAA7G,CAAAsD,EAAArC,EAAA6F,KA+BrB,SAAAjE,EAA4Bb,GAA5B,IAAA0J,EAAAlK,EAAAmK,EAAA,OAAArI,EAAArC,EAAAsC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACE1B,EAAIC,iBAEAyJ,EAAc,CAChBhK,UAAWqI,EAASrI,UACpB0J,SAAUrB,EAASqB,SACnBC,MAAOtB,EAASsB,MAChBvB,SAAUC,EAASD,UAGjBtI,EAAWuI,EAASvI,SAV1BgC,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAcwBd,EAASgJ,YAAYpK,EAAUkK,GAdvD,OAcIC,EAdJnI,EAAAQ,KAAAR,EAAAE,KAAA,uBAAAF,EAAAC,KAAA,EAAAD,EAAAS,GAAAT,EAAA,SAiBI4G,EAAa5G,EAAAS,IAjBjBT,EAAAO,OAAA,kBAqBEiG,EAAY,SAAA6B,GAAC,OAAA7L,OAAA6K,EAAA,EAAA7K,QAAA6K,EAAA,EAAA7K,CAAA,GAAU6L,GAAV,IAAa/B,SAAU,OACpCM,EAAc,IACdqB,GAAiB,GAGjBN,EAAeQ,GA1BjB,yBAAAnI,EAAAc,SAAAzB,EAAA,kBA/BqB+D,MAAAlC,KAAAnF,WA6DrB,SAASmL,EAAa1I,GACpB,IAAA2I,EAAwB3I,EAAIO,OAApBJ,EAARwI,EAAQxI,KAAME,EAAdsI,EAActI,MACd2H,EAAY,SAAA6B,GAAC,OAAA7L,OAAA6K,EAAA,EAAA7K,QAAA6K,EAAA,EAAA7K,CAAA,GACR6L,GADQ,GAAA7L,OAAA8K,EAAA,EAAA9K,CAAA,GAEVmC,EAAOE,MAEV+H,EAAc,IAGhB,OAvDA/J,QAAQC,MACJ,cACA,eAAgBQ,EAChB,YAAaiJ,EACb,cAAeI,EACf,iBAAkBqB,GAmDlBxK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6CACbH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0BAA0B4I,EAASvI,WAElDR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SACIiB,KAAK,YACLhB,UAAU,eACVkB,MAAO0H,EAASrI,UAChBY,SAAUoI,KAGhB1J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,SACIiB,KAAK,WACLhB,UAAU,eACVkB,MAAO0H,EAASqB,SAChB9I,SAAUoI,KAGhB1J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,SACIiB,KAAK,QACLhB,UAAU,eACVkB,MAAO0H,EAASsB,MAChB/I,SAAUoI,KAGhB1J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAAA,SACIsB,KAAK,WACLL,KAAK,WACLhB,UAAU,eACVkB,MAAO0H,EAASD,SAChBxH,SAAUoI,KAIfP,EAAW3K,OACNwB,EAAAC,EAAAC,cAAC+J,EAAD,CAAOzI,KAAK,SAASgH,SAAUW,IAC/B,KAELqB,EAEGxK,EAAAC,EAAAC,cAAC+J,EAAD,CAAOzI,KAAK,UAAUgH,SAAU,CAAC,2BAC/B,KAENxI,EAAAC,EAAAC,cAAA,UACIC,UAAU,iCACVG,QAjIK,SAAAoF,GAAA,OAAA4D,EAAA1D,MAAAlC,KAAAnF,aA+HT,qBCnBCuM,MAnHf,SAAAlL,GAAgC,IAAVmL,EAAUnL,EAAVmL,OACdnC,EAAUC,cAChBhK,EAAgCC,mBAAS,CACvC0B,SAAU,GACVsI,SAAU,GACVpI,UAAW,GACX0J,SAAU,GACVC,MAAO,KALTtL,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAOkK,EAAPhK,EAAA,GAAiBiK,EAAjBjK,EAAA,GAOAkK,EAAoCnK,mBAAS,IAA7CoK,EAAAlK,OAAAC,EAAA,EAAAD,CAAAiK,EAAA,GAAOE,EAAPD,EAAA,GAAmBE,EAAnBF,EAAA,GAT8B,SAuBfG,EAvBe3D,GAAA,OAAA4D,EAAA1D,MAAAlC,KAAAnF,WAAA,SAAA+K,IAAA,OAAAA,EAAAtK,OAAA6G,EAAA,EAAA7G,CAAAsD,EAAArC,EAAA6F,KAuB9B,SAAAjE,EAA4Bb,GAA5B,IAAAuI,EAAA,OAAAjH,EAAArC,EAAAsC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACE1B,EAAIC,iBADNuB,EAAAE,KAAA,EAEqBqI,EAAOhC,GAF5B,QAEMQ,EAFN/G,EAAAQ,MAGawG,QACTZ,EAAQzB,KAAK,cAEbiC,EAAcG,EAAOE,QANzB,wBAAAjH,EAAAc,SAAAzB,OAvB8B+D,MAAAlC,KAAAnF,WAkC9B,SAASmL,EAAa1I,GACpB,IAAA2I,EAAwB3I,EAAIO,OAApBJ,EAARwI,EAAQxI,KAAME,EAAdsI,EAActI,MACd2H,EAAY,SAAAjH,GAAI,OAAA/C,OAAA6K,EAAA,EAAA7K,QAAA6K,EAAA,EAAA7K,CAAA,GAAU+C,GAAV,GAAA/C,OAAA8K,EAAA,EAAA9K,CAAA,GAAiBmC,EAAOE,MAG1C,OA5BAhC,QAAQC,MACJ,aACA,iBAAkByL,EAClB,YAAahC,EACb,cAAeI,GAyBfnJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,WACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMa,SAAUsI,GACdrJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,SACIiB,KAAK,WACLhB,UAAU,eACVkB,MAAO0H,EAASvI,SAChBc,SAAUoI,KAGhB1J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,SACIsB,KAAK,WACLL,KAAK,WACLhB,UAAU,eACVkB,MAAO0H,EAASD,SAChBxH,SAAUoI,KAIhB1J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SACIiB,KAAK,YACLhB,UAAU,eACVkB,MAAO0H,EAASrI,UAChBY,SAAUoI,KAGhB1J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,SACIiB,KAAK,WACLhB,UAAU,eACVkB,MAAO0H,EAASqB,SAChB9I,SAAUoI,KAGhB1J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,SACIsB,KAAK,QACLL,KAAK,QACLhB,UAAU,eACVkB,MAAO0H,EAASsB,MAChB/I,SAAUoI,KAIfP,EAAW3K,OACNwB,EAAAC,EAAAC,cAAC+J,EAAD,CAAOzI,KAAK,SAASgH,SAAUW,IAC/B,KAGNnJ,EAAAC,EAAAC,cAAA,UACIsB,KAAK,SACLrB,UAAU,8BACVY,SAAUsI,GAHd,gBCnFD2B,MArBf,SAAApL,GAAiD,IAAzBqL,EAAyBrL,EAAzBqL,MAAOC,EAAkBtL,EAAlBsL,KAAMC,EAAYvL,EAAZuL,SAC3BrL,EAAgBC,qBAAWP,GAA3BM,YASR,OAPAT,QAAQC,MACJ,eACA,SAAU2L,EACV,QAASC,EACT,eAAgBpL,GAGfA,EAKDE,EAAAC,EAAAC,cAACkL,EAAA,EAAD,CAAOH,MAAOA,EAAOC,KAAMA,GACxBC,GALEnL,EAAAC,EAAAC,cAACkL,EAAA,EAAD,CAAU/K,GAAG,YC0CTgL,MA7Cf,SAAAzL,GAAmC,IAAjB+I,EAAiB/I,EAAjB+I,MAAOoC,EAAUnL,EAAVmL,OAOvB,OANA1L,QAAQC,MACJ,SADJ,SAAAqD,cAEoBgG,GAFpB,YAAAhG,cAGuB2I,WAInBtL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACkL,EAAA,EAAD,KAEEpL,EAAAC,EAAAC,cAACkL,EAAA,EAAD,CAAOH,OAAK,EAACC,KAAK,KAChBlL,EAAAC,EAAAC,cAACqL,EAAD,OAGFvL,EAAAC,EAAAC,cAACkL,EAAA,EAAD,CAAOH,OAAK,EAACC,KAAK,UAChBlL,EAAAC,EAAAC,cAACsL,EAAD,CAAW7C,MAAOA,KAGpB3I,EAAAC,EAAAC,cAACkL,EAAA,EAAD,CAAOH,OAAK,EAACC,KAAK,WAChBlL,EAAAC,EAAAC,cAACuL,EAAD,CAAYV,OAAQA,KAGtB/K,EAAAC,EAAAC,cAACwL,EAAD,CAAcT,OAAK,EAACC,KAAK,cACvBlL,EAAAC,EAAAC,cAACyL,EAAD,OAGF3L,EAAAC,EAAAC,cAACwL,EAAD,CAAcT,OAAK,EAACC,KAAK,SACvBlL,EAAAC,EAAAC,cAAC0L,EAAD,OAGF5L,EAAAC,EAAAC,cAACwL,EAAD,CAAcT,OAAK,EAACC,KAAK,sBACvBlL,EAAAC,EAAAC,cAAC2L,EAAD,OAGF7L,EAAAC,EAAAC,cAACwL,EAAD,CAAcR,KAAK,YACjBlL,EAAAC,EAAAC,cAAC4L,EAAD,OAGF9L,EAAAC,EAAAC,cAACkL,EAAA,EAAD,CAAU/K,GAAG,2BC/CV0L,EAAmB,cA+HjBC,MA7Gf,WACE,IAAAnN,EAAoCC,oBAAS,GAA7CC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAOoN,EAAPlN,EAAA,GAAmBmN,EAAnBnN,EAAA,GACAkK,EAA4CnK,mBAAS,IAAIqN,IAAI,KAA7DjD,EAAAlK,OAAAC,EAAA,EAAAD,CAAAiK,EAAA,GAAOmD,EAAPlD,EAAA,GAAuBmD,EAAvBnD,EAAA,GACAoB,EAAsCxL,mBAAS,MAA/CyL,EAAAvL,OAAAC,EAAA,EAAAD,CAAAsL,EAAA,GAAOxK,EAAPyK,EAAA,GAAoBJ,EAApBI,EAAA,GACA+B,EAA0BlO,EAAgB2N,GAA1CQ,EAAAvN,OAAAC,EAAA,EAAAD,CAAAsN,EAAA,GAAOzJ,EAAP0J,EAAA,GAAcC,EAAdD,EAAA,GAJa,SAAAE,IAAA,OAAAA,EAAAzN,OAAA6G,EAAA,EAAA7G,CAAAsD,EAAArC,EAAA6F,KAwDb,SAAAvC,EAAsBmJ,GAAtB,IAAAC,EAAA,OAAArK,EAAArC,EAAAsC,KAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,cAAAe,EAAAhB,KAAA,EAAAgB,EAAAf,KAAA,EAEsBd,EAASmJ,OAAO2B,GAFtC,cAEQ7J,EAFRY,EAAAT,KAGIwJ,EAAS3J,GAHbY,EAAAV,OAAA,SAIW,CAAEyG,SAAS,IAJtB,cAAA/F,EAAAhB,KAAA,EAAAgB,EAAAR,GAAAQ,EAAA,SAMIpE,QAAQ6D,MAAM,gBAAdO,EAAAR,IANJQ,EAAAV,OAAA,SAOW,CAAEyG,SAAS,EAAOC,OAAMhG,EAAAR,KAPnC,yBAAAQ,EAAAH,SAAAC,EAAA,kBAxDaqC,MAAAlC,KAAAnF,WAAA,SAAAqO,IAAA,OAAAA,EAAA5N,OAAA6G,EAAA,EAAA7G,CAAAsD,EAAArC,EAAA6F,KAuEb,SAAAjC,EAAqBgJ,GAArB,IAAAC,EAAA,OAAAxK,EAAArC,EAAAsC,KAAA,SAAAuB,GAAA,cAAAA,EAAArB,KAAAqB,EAAApB,MAAA,cAAAoB,EAAArB,KAAA,EAAAqB,EAAApB,KAAA,EAEsBd,EAAS+G,MAAMkE,GAFrC,cAEQhK,EAFRiB,EAAAd,KAGIwJ,EAAS3J,GAHbiB,EAAAf,OAAA,SAIW,CAAEyG,SAAS,IAJtB,cAAA1F,EAAArB,KAAA,EAAAqB,EAAAb,GAAAa,EAAA,SAMIzE,QAAQ6D,MAAM,eAAdY,EAAAb,IANJa,EAAAf,OAAA,SAOW,CAAEyG,SAAS,EAAOC,OAAM3F,EAAAb,KAPnC,yBAAAa,EAAAR,SAAAO,EAAA,kBAvEa+B,MAAAlC,KAAAnF,WAmFb,SAASmI,EAAgBjC,GACvB,OAAO2H,EAAeW,IAAItI,GAU5B,OAxFApF,QAAQC,MACJ,MACA,cAAe2M,EACf,eAAgBnM,EAChB,SAAU+C,GAOdzD,oBAAU,WAAwB,SAAA4N,IAAA,OAAAA,EAAAhO,OAAA6G,EAAA,EAAA7G,CAAAsD,EAAArC,EAAA6F,KAGhC,SAAAjE,IAAA,IAAAoL,EAAAzM,EAAA0M,EAAA,OAAA5K,EAAArC,EAAAsC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACMG,EADN,CAAAL,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAwK,EAGyBE,IAAIC,OAAOvK,GAAxBrC,EAHZyM,EAGYzM,SAENoB,EAASiB,MAAQA,EALvBL,EAAAE,KAAA,EAM8Bd,EAASyL,eAAe7M,GANtD,OAMUV,EANV0C,EAAAQ,KAOMmH,EAAerK,GACfuM,EAAkB,IAAIF,IAAIrM,EAAYwN,eAR5C9K,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAS,GAAAT,EAAA,SAUMnD,QAAQ6D,MAAM,oCAAdV,EAAAS,IACAkH,EAAe,MAXrB,QAcE+B,GAAc,GAdhB,yBAAA1J,EAAAc,SAAAzB,EAAA,mBAHgC+D,MAAAlC,KAAAnF,WAChCc,QAAQC,MAAM,6BAA8B,SAAUuD,GAsBtDqJ,GAAc,GAvBkB,WAAAc,EAAApH,MAAAlC,KAAAnF,WAwBhC8O,IACC,CAACxK,IAoDCoJ,EAGDjM,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACqN,EAAYC,SAAb,CACInM,MAAO,CAAEvB,cAAaqK,iBAAgBzD,kBAAiBC,WAXjE,SAAoBlC,GACdiC,EAAgBjC,KACpB7C,EAAS+E,WAAW7G,EAAYU,SAAUiE,GAC1C4H,EAAkB,IAAIF,IAAJ,GAAAxJ,OAAA3D,OAAAyO,EAAA,EAAAzO,CAAYoN,GAAZ,CAA4B3H,UASxCzE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACwN,EAAD,CAAY7N,OAxDtB,WACEsK,EAAe,MACfqC,EAAS,SAuDDxM,EAAAC,EAAAC,cAACyN,EAAD,CAAQhF,MAtGL,SAAAiF,GAAA,OAAAhB,EAAAhH,MAAAlC,KAAAnF,YAsGmBwM,OAtGnB,SAAArF,GAAA,OAAA+G,EAAA7G,MAAAlC,KAAAnF,iBA8FWyB,EAAAC,EAAAC,cAACkG,EAAD,OC/GNyH,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZRC,IAASC,OAAOnO,EAAAC,EAAAC,cAACkO,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACnBC,KAAK,SAAAC,GACJA,EAAaC,eAEdC,MAAM,SAAA3L,GACL7D,QAAQ6D,MAAMA,EAAMd","file":"static/js/main.55e1d40c.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\n/** Custom hook for keeping state data synced with localStorage.\n *\n * This creates `item` as state and look in localStorage for current value\n * (if not found, defaults to `firstValue`)\n *\n * When `item` changes, effect re-runs:\n * - if new state is null, removes from localStorage\n * - else, updates localStorage\n *\n * To the component, this just acts like state that is also synced to/from\n * localStorage::\n *\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\n */\n\nfunction useLocalStorage(key, firstValue = null) {\n  const initialValue = localStorage.getItem(key) || firstValue;\n\n  const [item, setItem] = useState(initialValue);\n\n  useEffect(function setKeyInLocalStorage() {\n    console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\n\n    if (item === null) {\n      localStorage.removeItem(key);\n    } else {\n      localStorage.setItem(key, item);\n    }\n  }, [key, item]);\n\n  return [item, setItem];\n}\n\nexport default useLocalStorage;\n","import React from \"react\";\n\n/** Context: provides currentUser object and setter for it throughout app. */\n\nconst UserContext = React.createContext();\n\nexport default UserContext;\n","import React, { useContext } from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport UserContext from \"../auth/UserContext\";\nimport \"./Navigation.css\";\n\n/** Navigation bar for site. Shows up on every page.\n *\n * When user is logged in, shows links to main areas of site. When not,\n * shows link to Login and Signup forms.\n *\n * Rendered by App.\n */\n\nfunction Navigation({ logout }) {\n  const { currentUser } = useContext(UserContext);\n  console.debug(\"Navigation\", \"currentUser=\", currentUser);\n\n  function loggedInNav() {\n    return (\n        <ul className=\"navbar-nav ml-auto\">\n          <li className=\"nav-item mr-4\">\n            <NavLink className=\"nav-link\" to=\"/companies\">\n              Companies\n            </NavLink>\n          </li>\n          <li className=\"nav-item mr-4\">\n            <NavLink className=\"nav-link\" to=\"/jobs\">\n              Jobs\n            </NavLink>\n          </li>\n          <li className=\"nav-item mr-4\">\n            <NavLink className=\"nav-link\" to=\"/profile\">\n              Profile\n            </NavLink>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/\" onClick={logout}>\n              Log out {currentUser.first_name || currentUser.username}\n            </Link>\n          </li>\n        </ul>\n    );\n  }\n\n  function loggedOutNav() {\n    return (\n        <ul className=\"navbar-nav ml-auto\">\n          <li className=\"nav-item mr-4\">\n            <NavLink className=\"nav-link\" to=\"/login\">\n              Login\n            </NavLink>\n          </li>\n          <li className=\"nav-item mr-4\">\n            <NavLink className=\"nav-link\" to=\"/signup\">\n              Sign Up\n            </NavLink>\n          </li>\n        </ul>\n    );\n  }\n\n  return (\n      <nav className=\"Navigation navbar navbar-expand-md\">\n        <Link className=\"navbar-brand\" to=\"/\">\n          Jobly\n        </Link>\n        {currentUser ? loggedInNav() : loggedOutNav()}\n      </nav>\n  );\n}\n\nexport default Navigation;\n","import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Homepage.css\";\nimport UserContext from \"../auth/UserContext\";\n\n/** Homepage of site.\n *\n * Shows welcome message or login/register buttons.\n *\n * Routed at /\n *\n * Routes -> Homepage\n */\n\nfunction Homepage() {\n  const { currentUser } = useContext(UserContext);\n  console.debug(\"Homepage\", \"currentUser=\", currentUser);\n\n  return (\n      <div className=\"Homepage\">\n        <div className=\"container text-center\">\n          <h1 className=\"mb-4 font-weight-bold\">Jobly</h1>\n          <p className=\"lead\">All the jobs in one, convenient place.</p>\n          {currentUser\n              ? <h2>\n                Welcome Back, {currentUser.firstName || currentUser.username}!\n              </h2>\n              : (\n                  <p>\n                    <Link className=\"btn btn-primary font-weight-bold mr-3\"\n                          to=\"/login\">\n                      Log in\n                    </Link>\n                    <Link className=\"btn btn-primary font-weight-bold\"\n                          to=\"/signup\">\n                      Sign up\n                    </Link>\n                  </p>\n              )}\n        </div>\n      </div>\n  );\n}\n\nexport default Homepage;\n","import React, { useState } from \"react\";\nimport \"./SearchForm.css\";\n\n/** Search widget.\n *\n * Appears on CompanyList and JobList so that these can be filtered\n * down.\n *\n * This component doesn't *do* the searching, but it renders the search\n * form and calls the `searchFor` function prop that runs in a parent to do the\n * searching.\n *\n * { CompanyList, JobList } -> SearchForm\n */\n\nfunction SearchForm({ searchFor }) {\n  console.debug(\"SearchForm\", \"searchFor=\", typeof searchFor);\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  /** Tell parent to filter */\n  function handleSubmit(evt) {\n    // take care of accidentally trying to search for just spaces\n    evt.preventDefault();\n    searchFor(searchTerm.trim() || undefined);\n    setSearchTerm(searchTerm.trim());\n  }\n\n  /** Update form fields */\n  function handleChange(evt) {\n    setSearchTerm(evt.target.value);\n  }\n\n  return (\n      <div className=\"SearchForm mb-4\">\n        <form className=\"form-inline\" onSubmit={handleSubmit}>\n          <input\n              className=\"form-control form-control-lg flex-grow-1\"\n              name=\"searchTerm\"\n              placeholder=\"Enter search term..\"\n              value={searchTerm}\n              onChange={handleChange}\n          />\n          <button type=\"submit\" className=\"btn btn-lg btn-primary\">\n            Submit\n          </button>\n        </form>\n      </div>\n  );\n}\n\nexport default SearchForm;\n","import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = (method === \"get\")\n        ? data\n        : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get the current user. */\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Get companies (filtered by name if not undefined) */\n\n  static async getCompanies(name) {\n    let res = await this.request(\"companies\", { name });\n    return res.companies;\n  }\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get list of jobs (filtered by title if not undefined) */\n\n  static async getJobs(title) {\n    let res = await this.request(\"jobs\", { title });\n    return res.jobs;\n  }\n\n  /** Apply to a job */\n\n  static async applyToJob(username, id) {\n    await this.request(`users/${username}/jobs/${id}`, {}, \"post\");\n  }\n\n  /** Get token for login from username, password. */\n\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n\n  /** Signup for site. */\n\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n\n  /** Save user profile page. */\n\n  static async saveProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n}\n\n\nexport default JoblyApi;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./CompanyCard.css\";\n\n/** Show limited information about a company\n *\n * Is rendered by CompanyList to show a \"card\" for each company.\n *\n * CompanyList -> CompanyCard\n */\n\nfunction CompanyCard({ name, description, logoUrl, handle }) {\n  console.debug(\"CompanyCard\", logoUrl);\n\n  return (\n      <Link className=\"CompanyCard card\" to={`/companies/${handle}`}>\n        <div className=\"card-body\">\n          <h6 className=\"card-title\">\n            {name}\n            {logoUrl && <img src={logoUrl}\n                             alt={name}\n                             className=\"float-right ml-5\" />}\n          </h6>\n          <p><small>{description}</small></p>\n        </div>\n      </Link>\n  );\n}\n\nexport default CompanyCard;\n","import React from \"react\";\nimport \"./LoadingSpinner.css\";\n\n/** Loading message used by components that fetch API data. */\n\nfunction LoadingSpinner() {\n  return (\n      <div className=\"LoadingSpinner\">\n        Loading ...\n      </div>\n  );\n}\n\nexport default LoadingSpinner;","import React, { useState, useEffect } from \"react\";\nimport SearchForm from \"../common/SearchForm\";\nimport JoblyApi from \"../api/api\";\nimport CompanyCard from \"./CompanyCard\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\n\n/** Show page with list of companies.\n *\n * On mount, loads companies from API.\n * Re-loads filtered companies on submit from search form.\n *\n * This is routed to at /companies\n *\n * Routes -> { CompanyCard, SearchForm }\n */\n\nfunction CompanyList() {\n  console.debug(\"CompanyList\");\n\n  const [companies, setCompanies] = useState(null);\n\n  useEffect(function getCompaniesOnMount() {\n    console.debug(\"CompanyList useEffect getCompaniesOnMount\");\n    search();\n  }, []);\n\n  /** Triggered by search form submit; reloads companies. */\n  async function search(name) {\n    let companies = await JoblyApi.getCompanies(name);\n    setCompanies(companies);\n  }\n\n  if (!companies) return <LoadingSpinner />;\n\n  return (\n      <div className=\"CompanyList col-md-8 offset-md-2\">\n        <SearchForm searchFor={search} />\n        {companies.length\n            ? (\n                <div className=\"CompanyList-list\">\n                  {companies.map(c => (\n                      <CompanyCard\n                          key={c.handle}\n                          handle={c.handle}\n                          name={c.name}\n                          description={c.description}\n                          logoUrl={c.logoUrl}\n                      />\n                  ))}\n                </div>\n            ) : (\n                <p className=\"lead\">Sorry, no results were found!</p>\n            )}\n      </div>\n  );\n}\n\nexport default CompanyList;\n","import React, { useContext, useState } from \"react\";\nimport \"./JobCard.css\";\nimport UserContext from \"../auth/UserContext\";\n\n/** Show limited information about a job.\n *\n * Is rendered by JobCardList to show a \"card\" for each job.\n *\n * Receives apply func prop from parent, which is called on apply.\n *\n * JobCardList -> JobCard\n */\n\nfunction JobCard({ id, title, salary, equity, companyName }) {\n  console.debug(\"JobCard\");\n\n  const { hasAppliedToJob, applyToJob } = useContext(UserContext);\n  const [applied, setApplied] = useState();\n\n  React.useEffect(function updateAppliedStatus() {\n    console.debug(\"JobCard useEffect updateAppliedStatus\", \"id=\", id);\n\n    setApplied(hasAppliedToJob(id));\n  }, [id, hasAppliedToJob]);\n\n  /** Apply for a job */\n  async function handleApply(evt) {\n    if (hasAppliedToJob(id)) return;\n    applyToJob(id);\n    setApplied(true);\n  }\n\n  return (\n      <div className=\"JobCard card\"> {applied}\n        <div className=\"card-body\">\n          <h6 className=\"card-title\">{title}</h6>\n          <p>{companyName}</p>\n          {salary && <div><small>Salary: {formatSalary(salary)}</small></div>}\n          {equity !== undefined && <div><small>Equity: {equity}</small></div>}\n          <button\n              className=\"btn btn-danger font-weight-bold text-uppercase float-right\"\n              onClick={handleApply}\n              disabled={applied}\n          >\n            {applied ? \"Applied\" : \"Apply\"}\n          </button>\n        </div>\n      </div>\n  );\n}\n\n/** Render integer salary like '$1,250,343' */\n\nfunction formatSalary(salary) {\n  const digitsRev = [];\n  const salaryStr = salary.toString();\n\n  for (let i = salaryStr.length - 1; i >= 0; i--) {\n    digitsRev.push(salaryStr[i]);\n    if (i > 0 && i % 3 === 0) digitsRev.push(\",\");\n  }\n\n  return digitsRev.reverse().join(\"\");\n}\n\n\nexport default JobCard;\n","import React from \"react\";\nimport JobCard from \"./JobCard\";\n\n/** Show list of job cards.\n *\n * Used by both JobList and CompanyDetail to list jobs. Receives an apply\n * func prop which will be called by JobCard on apply.\n *\n * JobList -> JobCardList -> JobCard\n * CompanyDetail -> JobCardList -> JobCard\n *\n */\n\nfunction JobCardList({ jobs, apply }) {\n  console.debug(\"JobCardList\", \"jobs=\", jobs);\n\n  return (\n      <div className=\"JobCardList\">\n        {jobs.map(job => (\n            <JobCard\n                key={job.id}\n                id={job.id}\n                title={job.title}\n                salary={job.salary}\n                equity={job.equity}\n                companyName={job.companyName}\n            />\n        ))}\n      </div>\n  );\n}\n\nexport default JobCardList;\n","import React, { useState, useEffect } from \"react\";\nimport Search from \"../common/SearchForm\";\nimport JoblyApi from \"../api/api\";\nimport JobCardList from \"./JobCardList\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\n\n/** Show page with list of jobs.\n *\n * On mount, loads jobs from API.\n * Re-loads filtered jobs on submit from search form.\n *\n * JobList -> JobCardList -> JobCard\n *\n * This is routed to at /jobs\n */\n\nfunction JobList() {\n  console.debug(\"JobList\");\n\n  const [jobs, setJobs] = useState(null);\n\n  useEffect(function getAllJobsOnMount() {\n    console.debug(\"JobList useEffect getAllJobsOnMount\");\n    search();\n  }, []);\n\n  /** Triggered by search form submit; reloads jobs. */\n  async function search(title) {\n    let jobs = await JoblyApi.getJobs(title);\n    setJobs(jobs);\n  }\n\n  if (!jobs) return <LoadingSpinner />;\n\n  return (\n      <div className=\"JobList col-md-8 offset-md-2\">\n        <Search searchFor={search} />\n        {jobs.length\n            ? <JobCardList jobs={jobs} />\n            : <p className=\"lead\">Sorry, no results were found!</p>\n        }\n      </div>\n  );\n}\n\nexport default JobList;\n","import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport JoblyApi from \"../api/api\";\nimport JobCardList from \"../jobs/JobCardList\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\n\n/** Company Detail page.\n *\n * Renders information about company, along with the jobs at that company.\n *\n * Routed at /companies/:handle\n *\n * Routes -> CompanyDetail -> JobCardList\n */\n\nfunction CompanyDetail() {\n  const { handle } = useParams();\n  console.debug(\"CompanyDetail\", \"handle=\", handle);\n\n  const [company, setCompany] = useState(null);\n\n  useEffect(function getCompanyAndJobsForUser() {\n    async function getCompany() {\n      setCompany(await JoblyApi.getCompany(handle));\n    }\n\n    getCompany();\n  }, [handle]);\n\n  if (!company) return <LoadingSpinner />;\n\n  return (\n      <div className=\"CompanyDetail col-md-8 offset-md-2\">\n        <h4>{company.name}</h4>\n        <p>{company.description}</p>\n        <JobCardList jobs={company.jobs} />\n      </div>\n  );\n}\n\nexport default CompanyDetail;\n","import React from \"react\";\n\n/** Presentational component for showing bootstrap-style alerts.\n *\n * { LoginForm, SignupForm, ProfileForm } -> Alert\n **/\n\nfunction Alert({ type = \"danger\", messages = [] }) {\n  console.debug(\"Alert\", \"type=\", type, \"messages=\", messages);\n\n  return (\n      <div className={`alert alert-${type}`} role=\"alert\">\n        {messages.map(error => (\n            <p className=\"mb-0 small\" key={error}>\n              {error}\n            </p>\n        ))}\n      </div>\n  );\n}\n\nexport default Alert;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Alert from \"../common/Alert\";\n\n/** Login form.\n *\n * Shows form and manages update to state on changes.\n * On submission:\n * - calls login function prop\n * - redirects to /companies route\n *\n * Routes -> LoginForm -> Alert\n * Routed as /login\n */\n\nfunction LoginForm({ login }) {\n  const history = useHistory();\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n  });\n  const [formErrors, setFormErrors] = useState([]);\n\n  console.debug(\n      \"LoginForm\",\n      \"login=\", typeof login,\n      \"formData=\", formData,\n      \"formErrors\", formErrors,\n  );\n\n  /** Handle form submit:\n   *\n   * Calls login func prop and, if successful, redirect to /companies.\n   */\n\n  async function handleSubmit(evt) {\n    evt.preventDefault();\n    let result = await login(formData);\n    if (result.success) {\n      history.push(\"/companies\");\n    } else {\n      setFormErrors(result.errors);\n    }\n  }\n\n  /** Update form data field */\n  function handleChange(evt) {\n    const { name, value } = evt.target;\n    setFormData(l => ({ ...l, [name]: value }));\n  }\n\n  return (\n      <div className=\"LoginForm\">\n        <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\n          <h3 className=\"mb-3\">Log In</h3>\n\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <form onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                  <label>Username</label>\n                  <input\n                      name=\"username\"\n                      className=\"form-control\"\n                      value={formData.username}\n                      onChange={handleChange}\n                      autoComplete=\"username\"\n                      required\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Password</label>\n                  <input\n                      type=\"password\"\n                      name=\"password\"\n                      className=\"form-control\"\n                      value={formData.password}\n                      onChange={handleChange}\n                      autoComplete=\"current-password\"\n                      required\n                  />\n                </div>\n\n                {formErrors.length\n                    ? <Alert type=\"danger\" messages={formErrors} />\n                    : null}\n\n                <button\n                    className=\"btn btn-primary float-right\"\n                    onSubmit={handleSubmit}\n                >\n                  Submit\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default LoginForm;\n","import React, { useState, useContext } from \"react\";\nimport Alert from \"../common/Alert\";\nimport JoblyApi from \"../api/api\";\nimport UserContext from \"../auth/UserContext\";\n\n// eslint-disable-next-line\nimport useTimedMessage from \"../hooks/useTimedMessage\";\n\n/** Profile editing form.\n *\n * Displays profile form and handles changes to local form state.\n * Submitting the form calls the API to save, and triggers user reloading\n * throughout the site.\n *\n * Confirmation of a successful save is normally a simple <Alert>, but\n * you can opt-in to our fancy limited-time-display message hook,\n * `useTimedMessage`, but switching the lines below.\n *\n * Routed as /profile\n * Routes -> ProfileForm -> Alert\n */\n\nfunction ProfileForm() {\n  const { currentUser, setCurrentUser } = useContext(UserContext);\n  const [formData, setFormData] = useState({\n    firstName: currentUser.firstName,\n    lastName: currentUser.lastName,\n    email: currentUser.email,\n    username: currentUser.username,\n    password: \"\",\n  });\n  const [formErrors, setFormErrors] = useState([]);\n\n  // switch to use our fancy limited-time-display message hook\n  const [saveConfirmed, setSaveConfirmed] = useState(false);\n  // const [saveConfirmed, setSaveConfirmed] = useTimedMessage()\n\n  console.debug(\n      \"ProfileForm\",\n      \"currentUser=\", currentUser,\n      \"formData=\", formData,\n      \"formErrors=\", formErrors,\n      \"saveConfirmed=\", saveConfirmed,\n  );\n\n  /** on form submit:\n   * - attempt save to backend & report any errors\n   * - if successful\n   *   - clear previous error messages and password\n   *   - show save-confirmed message\n   *   - set current user info throughout the site\n   */\n\n  async function handleSubmit(evt) {\n    evt.preventDefault();\n\n    let profileData = {\n      firstName: formData.firstName,\n      lastName: formData.lastName,\n      email: formData.email,\n      password: formData.password,\n    };\n\n    let username = formData.username;\n    let updatedUser;\n\n    try {\n      updatedUser = await JoblyApi.saveProfile(username, profileData);\n    } catch (errors) {\n      debugger;\n      setFormErrors(errors);\n      return;\n    }\n\n    setFormData(f => ({ ...f, password: \"\" }));\n    setFormErrors([]);\n    setSaveConfirmed(true);\n\n    // trigger reloading of user information throughout the site\n    setCurrentUser(updatedUser);\n  }\n\n  /** Handle form data changing */\n  function handleChange(evt) {\n    const { name, value } = evt.target;\n    setFormData(f => ({\n      ...f,\n      [name]: value,\n    }));\n    setFormErrors([]);\n  }\n\n  return (\n      <div className=\"col-md-6 col-lg-4 offset-md-3 offset-lg-4\">\n        <h3>Profile</h3>\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <form>\n              <div className=\"form-group\">\n                <label>Username</label>\n                <p className=\"form-control-plaintext\">{formData.username}</p>\n              </div>\n              <div className=\"form-group\">\n                <label>First Name</label>\n                <input\n                    name=\"firstName\"\n                    className=\"form-control\"\n                    value={formData.firstName}\n                    onChange={handleChange}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Last Name</label>\n                <input\n                    name=\"lastName\"\n                    className=\"form-control\"\n                    value={formData.lastName}\n                    onChange={handleChange}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Email</label>\n                <input\n                    name=\"email\"\n                    className=\"form-control\"\n                    value={formData.email}\n                    onChange={handleChange}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Confirm password to make changes:</label>\n                <input\n                    type=\"password\"\n                    name=\"password\"\n                    className=\"form-control\"\n                    value={formData.password}\n                    onChange={handleChange}\n                />\n              </div>\n\n              {formErrors.length\n                  ? <Alert type=\"danger\" messages={formErrors} />\n                  : null}\n\n              {saveConfirmed\n                  ?\n                  <Alert type=\"success\" messages={[\"Updated successfully.\"]} />\n                  : null}\n\n              <button\n                  className=\"btn btn-primary btn-block mt-4\"\n                  onClick={handleSubmit}\n              >\n                Save Changes\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default ProfileForm;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Alert from \"../common/Alert\";\n\n/** Signup form.\n *\n * Shows form and manages update to state on changes.\n * On submission:\n * - calls signup function prop\n * - redirects to /companies route\n *\n * Routes -> SignupForm -> Alert\n * Routed as /signup\n */\n\nfunction SignupForm({ signup }) {\n  const history = useHistory();\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n  });\n  const [formErrors, setFormErrors] = useState([]);\n\n  console.debug(\n      \"SignupForm\",\n      \"signup=\", typeof signup,\n      \"formData=\", formData,\n      \"formErrors=\", formErrors,\n  );\n\n  /** Handle form submit:\n   *\n   * Calls login func prop and, if successful, redirect to /companies.\n   */\n\n  async function handleSubmit(evt) {\n    evt.preventDefault();\n    let result = await signup(formData);\n    if (result.success) {\n      history.push(\"/companies\");\n    } else {\n      setFormErrors(result.errors);\n    }\n  }\n\n  /** Update form data field */\n  function handleChange(evt) {\n    const { name, value } = evt.target;\n    setFormData(data => ({ ...data, [name]: value }));\n  }\n\n  return (\n      <div className=\"SignupForm\">\n        <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\n          <h2 className=\"mb-3\">Sign Up</h2>\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <form onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                  <label>Username</label>\n                  <input\n                      name=\"username\"\n                      className=\"form-control\"\n                      value={formData.username}\n                      onChange={handleChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Password</label>\n                  <input\n                      type=\"password\"\n                      name=\"password\"\n                      className=\"form-control\"\n                      value={formData.password}\n                      onChange={handleChange}\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <label>First name</label>\n                  <input\n                      name=\"firstName\"\n                      className=\"form-control\"\n                      value={formData.firstName}\n                      onChange={handleChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Last name</label>\n                  <input\n                      name=\"lastName\"\n                      className=\"form-control\"\n                      value={formData.lastName}\n                      onChange={handleChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Email</label>\n                  <input\n                      type=\"email\"\n                      name=\"email\"\n                      className=\"form-control\"\n                      value={formData.email}\n                      onChange={handleChange}\n                  />\n                </div>\n\n                {formErrors.length\n                    ? <Alert type=\"danger\" messages={formErrors} />\n                    : null\n                }\n\n                <button\n                    type=\"submit\"\n                    className=\"btn btn-primary float-right\"\n                    onSubmit={handleSubmit}\n                >\n                  Submit\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default SignupForm;","import React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport UserContext from \"../auth/UserContext\";\n\n/** \"Higher-Order Component\" for private routes.\n *\n * In routing component, use these instead of <Route ...>. This component\n * will check if there is a valid current user and only continues to the\n * route if so. If no user is present, redirects to login form.\n */\n\nfunction PrivateRoute({ exact, path, children }) {\n  const { currentUser } = useContext(UserContext);\n\n  console.debug(\n      \"PrivateRoute\",\n      \"exact=\", exact,\n      \"path=\", path,\n      \"currentUser=\", currentUser,\n  );\n\n  if (!currentUser) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return (\n      <Route exact={exact} path={path}>\n        {children}\n      </Route>\n  );\n}\n\nexport default PrivateRoute;\n","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Homepage from \"../homepage/Homepage\";\nimport CompanyList from \"../companies/CompanyList\";\nimport JobList from \"../jobs/JobList\";\nimport CompanyDetail from \"../companies/CompanyDetail\";\nimport LoginForm from \"../auth/LoginForm\";\nimport ProfileForm from \"../profiles/ProfileForm\";\nimport SignupForm from \"../auth/SignupForm\";\nimport PrivateRoute from \"./PrivateRoute\";\n\n/** Site-wide routes.\n *\n * Parts of site should only be visitable when logged in. Those routes are\n * wrapped by <PrivateRoute>, which is an authorization component.\n *\n * Visiting a non-existant route redirects to the homepage.\n */\n\nfunction Routes({ login, signup }) {\n  console.debug(\n      \"Routes\",\n      `login=${typeof login}`,\n      `register=${typeof register}`,\n  );\n\n  return (\n      <div className=\"pt-5\">\n        <Switch>\n\n          <Route exact path=\"/\">\n            <Homepage />\n          </Route>\n\n          <Route exact path=\"/login\">\n            <LoginForm login={login} />\n          </Route>\n\n          <Route exact path=\"/signup\">\n            <SignupForm signup={signup} />\n          </Route>\n\n          <PrivateRoute exact path=\"/companies\">\n            <CompanyList />\n          </PrivateRoute>\n\n          <PrivateRoute exact path=\"/jobs\">\n            <JobList />\n          </PrivateRoute>\n\n          <PrivateRoute exact path=\"/companies/:handle\">\n            <CompanyDetail />\n          </PrivateRoute>\n\n          <PrivateRoute path=\"/profile\">\n            <ProfileForm />\n          </PrivateRoute>\n\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n  );\n}\n\nexport default Routes;\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./routes-nav/Navigation\";\nimport Routes from \"./routes-nav/Routes\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport JoblyApi from \"./api/api\";\nimport UserContext from \"./auth/UserContext\";\nimport jwt from \"jsonwebtoken\";\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\n\n/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */\n\n\nfunction App() {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  console.debug(\n      \"App\",\n      \"infoLoaded=\", infoLoaded,\n      \"currentUser=\", currentUser,\n      \"token=\", token,\n  );\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwt.decode(token);\n          // put the token on the Api class so it can use it to call the API.\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          setApplicationIds(new Set(currentUser.applications));\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  /** Handles site-wide logout. */\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Checks if a job has been applied for. */\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n\n  /** Apply to a job: make API call and update set of application IDs. */\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n\n  if (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n      <BrowserRouter>\n        <UserContext.Provider\n            value={{ currentUser, setCurrentUser, hasAppliedToJob, applyToJob }}>\n          <div className=\"App\">\n            <Navigation logout={logout} />\n            <Routes login={login} signup={signup} />\n          </div>\n        </UserContext.Provider>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    \"New content is available and will be used when all \" +\n                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log(\"Content is cached for offline use.\");\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error(\"Error during service worker registration:\", error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get(\"content-type\");\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf(\"javascript\") === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            \"No internet connection found. App is running in offline mode.\",\n        );\n      });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}