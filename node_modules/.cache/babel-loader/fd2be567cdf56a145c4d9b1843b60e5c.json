{"ast":null,"code":"import _slicedToArray from\"/Users/vaughnrussillo/SpringBoard_Projects/react/react-jobly-solution/jobly/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useRef,useState,useEffect}from\"react\";/** Custom hook for managing \"flash\" messages.\n *\n * This adds an item in state, `active`, which can be controlled by the\n * component as desired. The component would typically `setActive(true)`\n * to start displaying the message, and after `timeInMsec`, active would\n * go back to false, which would typically stop showing the message.\n *\n * In the component::\n *\n *   const [myMsgFlag, setMyMsgFlag] = useTimedMessage();\n *\n *   function somethingDidntWork() {\n *     setMsgFlag(true);\n *   }\n *\n *   return (\n *     {myMsgFlag ? <p>Oh No!</p> : null}\n *   )\n *\n * While this hook was written for showing flash messages, it's really just\n * a hook for timed state clearing -- this same pattern could be useful for\n * other tasks.\n *\n */function useTimedMessage(){var timeInMsec=arguments.length>0&&arguments[0]!==undefined?arguments[0]:3000;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),active=_useState2[0],setActive=_useState2[1];var messageShownRef=useRef(false);useEffect(function showSavedMessage(){console.debug(\"useTimedMessage useEffect showSavedMessage\",\"active=\",active);if(active&&!messageShownRef.current){messageShownRef.current=true;setTimeout(function removeMessage(){setActive(false);messageShownRef.current=false;},timeInMsec);}},[active,timeInMsec]);return[active,setActive];}export default useTimedMessage;","map":{"version":3,"sources":["/Users/vaughnrussillo/SpringBoard_Projects/react/react-jobly-solution/jobly/src/hooks/useTimedMessage.js"],"names":["useRef","useState","useEffect","useTimedMessage","timeInMsec","active","setActive","messageShownRef","showSavedMessage","console","debug","current","setTimeout","removeMessage"],"mappings":"kMAAA,OAASA,MAAT,CAAiBC,QAAjB,CAA2BC,SAA3B,KAA4C,OAA5C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,QAASC,CAAAA,eAAT,EAA4C,IAAnBC,CAAAA,UAAmB,2DAAN,IAAM,CAC1C,cAA4BH,QAAQ,CAAC,KAAD,CAApC,wCAAOI,MAAP,eAAeC,SAAf,eAEA,GAAMC,CAAAA,eAAe,CAAGP,MAAM,CAAC,KAAD,CAA9B,CAEAE,SAAS,CACL,QAASM,CAAAA,gBAAT,EAA4B,CAC1BC,OAAO,CAACC,KAAR,CACI,4CADJ,CACkD,SADlD,CAC6DL,MAD7D,EAGA,GAAIA,MAAM,EAAI,CAACE,eAAe,CAACI,OAA/B,CAAwC,CACtCJ,eAAe,CAACI,OAAhB,CAA0B,IAA1B,CACAC,UAAU,CAAC,QAASC,CAAAA,aAAT,EAAyB,CAClCP,SAAS,CAAC,KAAD,CAAT,CACAC,eAAe,CAACI,OAAhB,CAA0B,KAA1B,CACD,CAHS,CAGPP,UAHO,CAAV,CAID,CACF,CAZI,CAaL,CAACC,MAAD,CAASD,UAAT,CAbK,CAAT,CAgBA,MAAO,CAACC,MAAD,CAASC,SAAT,CAAP,CACD,CAED,cAAeH,CAAAA,eAAf","sourcesContent":["import { useRef, useState, useEffect } from \"react\";\n\n/** Custom hook for managing \"flash\" messages.\n *\n * This adds an item in state, `active`, which can be controlled by the\n * component as desired. The component would typically `setActive(true)`\n * to start displaying the message, and after `timeInMsec`, active would\n * go back to false, which would typically stop showing the message.\n *\n * In the component::\n *\n *   const [myMsgFlag, setMyMsgFlag] = useTimedMessage();\n *\n *   function somethingDidntWork() {\n *     setMsgFlag(true);\n *   }\n *\n *   return (\n *     {myMsgFlag ? <p>Oh No!</p> : null}\n *   )\n *\n * While this hook was written for showing flash messages, it's really just\n * a hook for timed state clearing -- this same pattern could be useful for\n * other tasks.\n *\n */\n\nfunction useTimedMessage(timeInMsec = 3000) {\n  const [active, setActive] = useState(false);\n\n  const messageShownRef = useRef(false);\n\n  useEffect(\n      function showSavedMessage() {\n        console.debug(\n            \"useTimedMessage useEffect showSavedMessage\", \"active=\", active);\n\n        if (active && !messageShownRef.current) {\n          messageShownRef.current = true;\n          setTimeout(function removeMessage() {\n            setActive(false);\n            messageShownRef.current = false;\n          }, timeInMsec);\n        }\n      },\n      [active, timeInMsec],\n  );\n\n  return [active, setActive];\n}\n\nexport default useTimedMessage;\n"]},"metadata":{},"sourceType":"module"}