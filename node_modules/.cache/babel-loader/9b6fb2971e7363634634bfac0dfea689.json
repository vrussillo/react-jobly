{"ast":null,"code":"import _toConsumableArray from\"/Users/vaughnrussillo/SpringBoard_Projects/react/react-jobly-solution/jobly/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"/Users/vaughnrussillo/SpringBoard_Projects/react/react-jobly-solution/jobly/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/vaughnrussillo/SpringBoard_Projects/react/react-jobly-solution/jobly/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/vaughnrussillo/SpringBoard_Projects/react/react-jobly-solution/jobly/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{BrowserRouter}from\"react-router-dom\";import useLocalStorage from\"./hooks/useLocalStorage\";import Navigation from\"./routes-nav/Navigation\";import Routes from\"./routes-nav/Routes\";import LoadingSpinner from\"./common/LoadingSpinner\";import JoblyApi from\"./api/api\";import UserContext from\"./auth/UserContext\";import jwt from\"jsonwebtoken\";// Key name for storing token in localStorage for \"remember me\" re-login\nexport var TOKEN_STORAGE_ID=\"jobly-token\";/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */function App(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),infoLoaded=_useState2[0],setInfoLoaded=_useState2[1];var _useState3=useState(new Set([])),_useState4=_slicedToArray(_useState3,2),applicationIds=_useState4[0],setApplicationIds=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),currentUser=_useState6[0],setCurrentUser=_useState6[1];var _useLocalStorage=useLocalStorage(TOKEN_STORAGE_ID),_useLocalStorage2=_slicedToArray(_useLocalStorage,2),token=_useLocalStorage2[0],setToken=_useLocalStorage2[1];console.debug(\"App\",\"infoLoaded=\",infoLoaded,\"currentUser=\",currentUser,\"token=\",token);// Load user info from API. Until a user is logged in and they have a token,\n// this should not run. It only needs to re-run when a user logs out, so\n// the value of the token is a dependency for this effect.\nuseEffect(function loadUserInfo(){console.debug(\"App useEffect loadUserInfo\",\"token=\",token);function getCurrentUser(){return _getCurrentUser.apply(this,arguments);}// set infoLoaded to false while async getCurrentUser runs; once the\n// data is fetched (or even if an error happens!), this will be set back\n// to false to control the spinner.\nfunction _getCurrentUser(){_getCurrentUser=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _jwt$decode,username,_currentUser;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!token){_context.next=15;break;}_context.prev=1;_jwt$decode=jwt.decode(token),username=_jwt$decode.username;// put the token on the Api class so it can use it to call the API.\nJoblyApi.token=token;_context.next=6;return JoblyApi.getCurrentUser(username);case 6:_currentUser=_context.sent;setCurrentUser(_currentUser);setApplicationIds(new Set(_currentUser.applications));_context.next=15;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](1);console.error(\"App loadUserInfo: problem loading\",_context.t0);setCurrentUser(null);case 15:setInfoLoaded(true);case 16:case\"end\":return _context.stop();}}},_callee,null,[[1,11]]);}));return _getCurrentUser.apply(this,arguments);}setInfoLoaded(false);getCurrentUser();},[token]);/** Handles site-wide logout. */function logout(){setCurrentUser(null);setToken(null);}/** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */function signup(_x){return _signup.apply(this,arguments);}/** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */function _signup(){_signup=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(signupData){var _token;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return JoblyApi.signup(signupData);case 3:_token=_context2.sent;setToken(_token);return _context2.abrupt(\"return\",{success:true});case 8:_context2.prev=8;_context2.t0=_context2[\"catch\"](0);console.error(\"signup failed\",_context2.t0);return _context2.abrupt(\"return\",{success:false,errors:_context2.t0});case 12:case\"end\":return _context2.stop();}}},_callee2,null,[[0,8]]);}));return _signup.apply(this,arguments);}function login(_x2){return _login.apply(this,arguments);}/** Checks if a job has been applied for. */function _login(){_login=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(loginData){var _token2;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return JoblyApi.login(loginData);case 3:_token2=_context3.sent;setToken(_token2);return _context3.abrupt(\"return\",{success:true});case 8:_context3.prev=8;_context3.t0=_context3[\"catch\"](0);console.error(\"login failed\",_context3.t0);return _context3.abrupt(\"return\",{success:false,errors:_context3.t0});case 12:case\"end\":return _context3.stop();}}},_callee3,null,[[0,8]]);}));return _login.apply(this,arguments);}function hasAppliedToJob(id){return applicationIds.has(id);}/** Apply to a job: make API call and update set of application IDs. */function applyToJob(id){if(hasAppliedToJob(id))return;JoblyApi.applyToJob(currentUser.username,id);setApplicationIds(new Set([].concat(_toConsumableArray(applicationIds),[id])));}if(!infoLoaded)return/*#__PURE__*/React.createElement(LoadingSpinner,null);return/*#__PURE__*/React.createElement(BrowserRouter,null,/*#__PURE__*/React.createElement(UserContext.Provider,{value:{currentUser:currentUser,setCurrentUser:setCurrentUser,hasAppliedToJob:hasAppliedToJob,applyToJob:applyToJob}},/*#__PURE__*/React.createElement(\"div\",{className:\"App\"},/*#__PURE__*/React.createElement(Navigation,{logout:logout}),/*#__PURE__*/React.createElement(Routes,{login:login,signup:signup}))));}export default App;","map":{"version":3,"sources":["/Users/vaughnrussillo/SpringBoard_Projects/react/react-jobly-solution/jobly/src/App.js"],"names":["React","useState","useEffect","BrowserRouter","useLocalStorage","Navigation","Routes","LoadingSpinner","JoblyApi","UserContext","jwt","TOKEN_STORAGE_ID","App","infoLoaded","setInfoLoaded","Set","applicationIds","setApplicationIds","currentUser","setCurrentUser","token","setToken","console","debug","loadUserInfo","getCurrentUser","decode","username","applications","error","logout","signup","signupData","success","errors","login","loginData","hasAppliedToJob","id","has","applyToJob"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./routes-nav/Navigation\";\nimport Routes from \"./routes-nav/Routes\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport JoblyApi from \"./api/api\";\nimport UserContext from \"./auth/UserContext\";\nimport jwt from \"jsonwebtoken\";\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\n\n/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */\n\n\nfunction App() {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  console.debug(\n      \"App\",\n      \"infoLoaded=\", infoLoaded,\n      \"currentUser=\", currentUser,\n      \"token=\", token,\n  );\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwt.decode(token);\n          // put the token on the Api class so it can use it to call the API.\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          setApplicationIds(new Set(currentUser.applications));\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  /** Handles site-wide logout. */\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Checks if a job has been applied for. */\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n\n  /** Apply to a job: make API call and update set of application IDs. */\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n\n  if (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n      <BrowserRouter>\n        <UserContext.Provider\n            value={{ currentUser, setCurrentUser, hasAppliedToJob, applyToJob }}>\n          <div className=\"App\">\n            <Navigation logout={logout} />\n            <Routes login={login} signup={signup} />\n          </div>\n        </UserContext.Provider>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}