{"ast":null,"code":"import { useRef, useState, useEffect } from \"react\";\n/** Custom hook for managing \"flash\" messages.\n *\n * This adds an item in state, `active`, which can be controlled by the\n * component as desired. The component would typically `setActive(true)`\n * to start displaying the message, and after `timeInMsec`, active would\n * go back to false, which would typically stop showing the message.\n *\n * In the component::\n *\n *   const [myMsgFlag, setMyMsgFlag] = useTimedMessage();\n *\n *   function somethingDidntWork() {\n *     setMsgFlag(true);\n *   }\n *\n *   return (\n *     {myMsgFlag ? <p>Oh No!</p> : null}\n *   )\n *\n * While this hook was written for showing flash messages, it's really just\n * a hook for timed state clearing -- this same pattern could be useful for\n * other tasks.\n *\n */\n\nfunction useTimedMessage() {\n  let timeInMsec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3000;\n  const [active, setActive] = useState(false);\n  const messageShownRef = useRef(false);\n  useEffect(function showSavedMessage() {\n    console.debug(\"useTimedMessage useEffect showSavedMessage\", \"active=\", active);\n\n    if (active && !messageShownRef.current) {\n      messageShownRef.current = true;\n      setTimeout(function removeMessage() {\n        setActive(false);\n        messageShownRef.current = false;\n      }, timeInMsec);\n    }\n  }, [active, timeInMsec]);\n  return [active, setActive];\n}\n\nexport default useTimedMessage;","map":{"version":3,"sources":["/Users/vaughnrussillo/SpringBoard_Projects/react/react-jobly-solution/jobly/src/hooks/useTimedMessage.js"],"names":["useRef","useState","useEffect","useTimedMessage","timeInMsec","active","setActive","messageShownRef","showSavedMessage","console","debug","current","setTimeout","removeMessage"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,SAA3B,QAA4C,OAA5C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,eAAT,GAA4C;AAAA,MAAnBC,UAAmB,uEAAN,IAAM;AAC1C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,KAAD,CAApC;AAEA,QAAMM,eAAe,GAAGP,MAAM,CAAC,KAAD,CAA9B;AAEAE,EAAAA,SAAS,CACL,SAASM,gBAAT,GAA4B;AAC1BC,IAAAA,OAAO,CAACC,KAAR,CACI,4CADJ,EACkD,SADlD,EAC6DL,MAD7D;;AAGA,QAAIA,MAAM,IAAI,CAACE,eAAe,CAACI,OAA/B,EAAwC;AACtCJ,MAAAA,eAAe,CAACI,OAAhB,GAA0B,IAA1B;AACAC,MAAAA,UAAU,CAAC,SAASC,aAAT,GAAyB;AAClCP,QAAAA,SAAS,CAAC,KAAD,CAAT;AACAC,QAAAA,eAAe,CAACI,OAAhB,GAA0B,KAA1B;AACD,OAHS,EAGPP,UAHO,CAAV;AAID;AACF,GAZI,EAaL,CAACC,MAAD,EAASD,UAAT,CAbK,CAAT;AAgBA,SAAO,CAACC,MAAD,EAASC,SAAT,CAAP;AACD;;AAED,eAAeH,eAAf","sourcesContent":["import { useRef, useState, useEffect } from \"react\";\n\n/** Custom hook for managing \"flash\" messages.\n *\n * This adds an item in state, `active`, which can be controlled by the\n * component as desired. The component would typically `setActive(true)`\n * to start displaying the message, and after `timeInMsec`, active would\n * go back to false, which would typically stop showing the message.\n *\n * In the component::\n *\n *   const [myMsgFlag, setMyMsgFlag] = useTimedMessage();\n *\n *   function somethingDidntWork() {\n *     setMsgFlag(true);\n *   }\n *\n *   return (\n *     {myMsgFlag ? <p>Oh No!</p> : null}\n *   )\n *\n * While this hook was written for showing flash messages, it's really just\n * a hook for timed state clearing -- this same pattern could be useful for\n * other tasks.\n *\n */\n\nfunction useTimedMessage(timeInMsec = 3000) {\n  const [active, setActive] = useState(false);\n\n  const messageShownRef = useRef(false);\n\n  useEffect(\n      function showSavedMessage() {\n        console.debug(\n            \"useTimedMessage useEffect showSavedMessage\", \"active=\", active);\n\n        if (active && !messageShownRef.current) {\n          messageShownRef.current = true;\n          setTimeout(function removeMessage() {\n            setActive(false);\n            messageShownRef.current = false;\n          }, timeInMsec);\n        }\n      },\n      [active, timeInMsec],\n  );\n\n  return [active, setActive];\n}\n\nexport default useTimedMessage;\n"]},"metadata":{},"sourceType":"module"}