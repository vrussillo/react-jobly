{"ast":null,"code":"import _slicedToArray from\"/Users/vaughnrussillo/SpringBoard_Projects/react/react-jobly-solution/jobly/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from\"react\";/** Custom hook for keeping state data synced with localStorage.\n *\n * This creates `item` as state and look in localStorage for current value\n * (if not found, defaults to `firstValue`)\n *\n * When `item` changes, effect re-runs:\n * - if new state is null, removes from localStorage\n * - else, updates localStorage\n *\n * To the component, this just acts like state that is also synced to/from\n * localStorage::\n *\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\n */function useLocalStorage(key){var firstValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var initialValue=localStorage.getItem(key)||firstValue;var _useState=useState(initialValue),_useState2=_slicedToArray(_useState,2),item=_useState2[0],setItem=_useState2[1];useEffect(function setKeyInLocalStorage(){console.debug(\"hooks useLocalStorage useEffect\",\"item=\",item);if(item===null){localStorage.removeItem(key);}else{localStorage.setItem(key,item);}},[key,item]);return[item,setItem];}export default useLocalStorage;","map":{"version":3,"sources":["/Users/vaughnrussillo/SpringBoard_Projects/react/react-jobly-solution/jobly/src/hooks/useLocalStorage.js"],"names":["useState","useEffect","useLocalStorage","key","firstValue","initialValue","localStorage","getItem","item","setItem","setKeyInLocalStorage","console","debug","removeItem"],"mappings":"kMAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,QAASC,CAAAA,eAAT,CAAyBC,GAAzB,CAAiD,IAAnBC,CAAAA,UAAmB,2DAAN,IAAM,CAC/C,GAAMC,CAAAA,YAAY,CAAGC,YAAY,CAACC,OAAb,CAAqBJ,GAArB,GAA6BC,UAAlD,CAEA,cAAwBJ,QAAQ,CAACK,YAAD,CAAhC,wCAAOG,IAAP,eAAaC,OAAb,eAEAR,SAAS,CAAC,QAASS,CAAAA,oBAAT,EAAgC,CACxCC,OAAO,CAACC,KAAR,CAAc,iCAAd,CAAiD,OAAjD,CAA0DJ,IAA1D,EAEA,GAAIA,IAAI,GAAK,IAAb,CAAmB,CACjBF,YAAY,CAACO,UAAb,CAAwBV,GAAxB,EACD,CAFD,IAEO,CACLG,YAAY,CAACG,OAAb,CAAqBN,GAArB,CAA0BK,IAA1B,EACD,CACF,CARQ,CAQN,CAACL,GAAD,CAAMK,IAAN,CARM,CAAT,CAUA,MAAO,CAACA,IAAD,CAAOC,OAAP,CAAP,CACD,CAED,cAAeP,CAAAA,eAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\n/** Custom hook for keeping state data synced with localStorage.\n *\n * This creates `item` as state and look in localStorage for current value\n * (if not found, defaults to `firstValue`)\n *\n * When `item` changes, effect re-runs:\n * - if new state is null, removes from localStorage\n * - else, updates localStorage\n *\n * To the component, this just acts like state that is also synced to/from\n * localStorage::\n *\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\n */\n\nfunction useLocalStorage(key, firstValue = null) {\n  const initialValue = localStorage.getItem(key) || firstValue;\n\n  const [item, setItem] = useState(initialValue);\n\n  useEffect(function setKeyInLocalStorage() {\n    console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\n\n    if (item === null) {\n      localStorage.removeItem(key);\n    } else {\n      localStorage.setItem(key, item);\n    }\n  }, [key, item]);\n\n  return [item, setItem];\n}\n\nexport default useLocalStorage;\n"]},"metadata":{},"sourceType":"module"}