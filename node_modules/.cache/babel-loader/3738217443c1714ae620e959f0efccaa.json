{"ast":null,"code":"var _jsxFileName = \"/Users/vaughnrussillo/SpringBoard_Projects/react/react-jobly-solution/jobly/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./routes-nav/Navigation\";\nimport Routes from \"./routes-nav/Routes\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport JoblyApi from \"./api/api\";\nimport UserContext from \"./auth/UserContext\";\nimport jwt from \"jsonwebtoken\"; // Key name for storing token in localStorage for \"remember me\" re-login\n\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\n/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */\n\nfunction App() {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n  console.debug(\"App\", \"infoLoaded=\", infoLoaded, \"currentUser=\", currentUser, \"token=\", token); // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let {\n            username\n          } = jwt.decode(token); // put the token on the Api class so it can use it to call the API.\n\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          setApplicationIds(new Set(currentUser.applications));\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n\n      setInfoLoaded(true);\n    } // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n\n\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n  /** Handles site-wide logout. */\n\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n  /** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\n\n\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      return {\n        success: true\n      };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return {\n        success: false,\n        errors\n      };\n    }\n  }\n  /** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n\n\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return {\n        success: true\n      };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return {\n        success: false,\n        errors\n      };\n    }\n  }\n  /** Checks if a job has been applied for. */\n\n\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n  /** Apply to a job: make API call and update set of application IDs. */\n\n\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n\n  if (!infoLoaded) return /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 27\n    }\n  });\n  return /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: {\n      currentUser,\n      setCurrentUser,\n      hasAppliedToJob,\n      applyToJob\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Navigation, {\n    logout: logout,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Routes, {\n    login: login,\n    signup: signup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/vaughnrussillo/SpringBoard_Projects/react/react-jobly-solution/jobly/src/App.js"],"names":["React","useState","useEffect","BrowserRouter","useLocalStorage","Navigation","Routes","LoadingSpinner","JoblyApi","UserContext","jwt","TOKEN_STORAGE_ID","App","infoLoaded","setInfoLoaded","applicationIds","setApplicationIds","Set","currentUser","setCurrentUser","token","setToken","console","debug","loadUserInfo","getCurrentUser","username","decode","applications","err","error","logout","signup","signupData","success","errors","login","loginData","hasAppliedToJob","id","has","applyToJob"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./routes-nav/Navigation\";\nimport Routes from \"./routes-nav/Routes\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport JoblyApi from \"./api/api\";\nimport UserContext from \"./auth/UserContext\";\nimport jwt from \"jsonwebtoken\";\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\n\n/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */\n\n\nfunction App() {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  console.debug(\n      \"App\",\n      \"infoLoaded=\", infoLoaded,\n      \"currentUser=\", currentUser,\n      \"token=\", token,\n  );\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwt.decode(token);\n          // put the token on the Api class so it can use it to call the API.\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          setApplicationIds(new Set(currentUser.applications));\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  /** Handles site-wide logout. */\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Checks if a job has been applied for. */\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n\n  /** Apply to a job: make API call and update set of application IDs. */\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n\n  if (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n      <BrowserRouter>\n        <UserContext.Provider\n            value={{ currentUser, setCurrentUser, hasAppliedToJob, applyToJob }}>\n          <div className=\"App\">\n            <Navigation logout={logout} />\n            <Routes login={login} signup={signup} />\n          </div>\n        </UserContext.Provider>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}