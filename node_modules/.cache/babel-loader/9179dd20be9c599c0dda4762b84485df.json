{"ast":null,"code":"var _jsxFileName = \"/Users/vaughnrussillo/SpringBoard_Projects/react/react-jobly-solution/jobly/src/jobs/JobCard.js\";\nimport React, { useContext, useState } from \"react\";\nimport \"./JobCard.css\";\nimport UserContext from \"../auth/UserContext\";\n/** Show limited information about a job.\n *\n * Is rendered by JobCardList to show a \"card\" for each job.\n *\n * Receives apply func prop from parent, which is called on apply.\n *\n * JobCardList -> JobCard\n */\n\nfunction JobCard(_ref) {\n  let {\n    id,\n    title,\n    salary,\n    equity,\n    companyName\n  } = _ref;\n  console.debug(\"JobCard\");\n  const {\n    hasAppliedToJob,\n    applyToJob\n  } = useContext(UserContext);\n  const [applied, setApplied] = useState();\n  React.useEffect(function updateAppliedStatus() {\n    console.debug(\"JobCard useEffect updateAppliedStatus\", \"id=\", id);\n    setApplied(hasAppliedToJob(id));\n  }, [id, hasAppliedToJob]);\n  /** Apply for a job */\n\n  async function handleApply(evt) {\n    if (hasAppliedToJob(id)) return;\n    applyToJob(id);\n    setApplied(true);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"JobCard card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, \" \", applied, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"card-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, title), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }, companyName), salary && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 22\n    }\n  }, /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 27\n    }\n  }, \"Salary: \", formatSalary(salary))), equity !== undefined && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 36\n    }\n  }, /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 41\n    }\n  }, \"Equity: \", equity)), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-danger font-weight-bold text-uppercase float-right\",\n    onClick: handleApply,\n    disabled: applied,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, applied ? \"Applied\" : \"Apply\")));\n}\n/** Render integer salary like '$1,250,343' */\n\n\nfunction formatSalary(salary) {\n  const digitsRev = [];\n  const salaryStr = salary.toString();\n\n  for (let i = salaryStr.length - 1; i >= 0; i--) {\n    digitsRev.push(salaryStr[i]);\n    if (i > 0 && i % 3 === 0) digitsRev.push(\",\");\n  }\n\n  return digitsRev.reverse().join(\"\");\n}\n\nexport default JobCard;","map":{"version":3,"sources":["/Users/vaughnrussillo/SpringBoard_Projects/react/react-jobly-solution/jobly/src/jobs/JobCard.js"],"names":["React","useContext","useState","UserContext","JobCard","id","title","salary","equity","companyName","console","debug","hasAppliedToJob","applyToJob","applied","setApplied","useEffect","updateAppliedStatus","handleApply","evt","formatSalary","undefined","digitsRev","salaryStr","toString","i","length","push","reverse","join"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAO,eAAP;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,OAAT,OAA6D;AAAA,MAA5C;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,KAAN;AAAaC,IAAAA,MAAb;AAAqBC,IAAAA,MAArB;AAA6BC,IAAAA;AAA7B,GAA4C;AAC3DC,EAAAA,OAAO,CAACC,KAAR,CAAc,SAAd;AAEA,QAAM;AAAEC,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAAkCZ,UAAU,CAACE,WAAD,CAAlD;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,EAAtC;AAEAF,EAAAA,KAAK,CAACgB,SAAN,CAAgB,SAASC,mBAAT,GAA+B;AAC7CP,IAAAA,OAAO,CAACC,KAAR,CAAc,uCAAd,EAAuD,KAAvD,EAA8DN,EAA9D;AAEAU,IAAAA,UAAU,CAACH,eAAe,CAACP,EAAD,CAAhB,CAAV;AACD,GAJD,EAIG,CAACA,EAAD,EAAKO,eAAL,CAJH;AAMA;;AACA,iBAAeM,WAAf,CAA2BC,GAA3B,EAAgC;AAC9B,QAAIP,eAAe,CAACP,EAAD,CAAnB,EAAyB;AACzBQ,IAAAA,UAAU,CAACR,EAAD,CAAV;AACAU,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAgCD,OAAhC,eACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BR,KAA5B,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIG,WAAJ,CAFF,EAGGF,MAAM,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAgBa,YAAY,CAACb,MAAD,CAA5B,CAAL,CAHb,EAIGC,MAAM,KAAKa,SAAX,iBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAgBb,MAAhB,CAAL,CAJ3B,eAKE;AACI,IAAA,SAAS,EAAC,4DADd;AAEI,IAAA,OAAO,EAAEU,WAFb;AAGI,IAAA,QAAQ,EAAEJ,OAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGA,OAAO,GAAG,SAAH,GAAe,OALzB,CALF,CADF,CADJ;AAiBD;AAED;;;AAEA,SAASM,YAAT,CAAsBb,MAAtB,EAA8B;AAC5B,QAAMe,SAAS,GAAG,EAAlB;AACA,QAAMC,SAAS,GAAGhB,MAAM,CAACiB,QAAP,EAAlB;;AAEA,OAAK,IAAIC,CAAC,GAAGF,SAAS,CAACG,MAAV,GAAmB,CAAhC,EAAmCD,CAAC,IAAI,CAAxC,EAA2CA,CAAC,EAA5C,EAAgD;AAC9CH,IAAAA,SAAS,CAACK,IAAV,CAAeJ,SAAS,CAACE,CAAD,CAAxB;AACA,QAAIA,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,CAAJ,KAAU,CAAvB,EAA0BH,SAAS,CAACK,IAAV,CAAe,GAAf;AAC3B;;AAED,SAAOL,SAAS,CAACM,OAAV,GAAoBC,IAApB,CAAyB,EAAzB,CAAP;AACD;;AAGD,eAAezB,OAAf","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport \"./JobCard.css\";\nimport UserContext from \"../auth/UserContext\";\n\n/** Show limited information about a job.\n *\n * Is rendered by JobCardList to show a \"card\" for each job.\n *\n * Receives apply func prop from parent, which is called on apply.\n *\n * JobCardList -> JobCard\n */\n\nfunction JobCard({ id, title, salary, equity, companyName }) {\n  console.debug(\"JobCard\");\n\n  const { hasAppliedToJob, applyToJob } = useContext(UserContext);\n  const [applied, setApplied] = useState();\n\n  React.useEffect(function updateAppliedStatus() {\n    console.debug(\"JobCard useEffect updateAppliedStatus\", \"id=\", id);\n\n    setApplied(hasAppliedToJob(id));\n  }, [id, hasAppliedToJob]);\n\n  /** Apply for a job */\n  async function handleApply(evt) {\n    if (hasAppliedToJob(id)) return;\n    applyToJob(id);\n    setApplied(true);\n  }\n\n  return (\n      <div className=\"JobCard card\"> {applied}\n        <div className=\"card-body\">\n          <h6 className=\"card-title\">{title}</h6>\n          <p>{companyName}</p>\n          {salary && <div><small>Salary: {formatSalary(salary)}</small></div>}\n          {equity !== undefined && <div><small>Equity: {equity}</small></div>}\n          <button\n              className=\"btn btn-danger font-weight-bold text-uppercase float-right\"\n              onClick={handleApply}\n              disabled={applied}\n          >\n            {applied ? \"Applied\" : \"Apply\"}\n          </button>\n        </div>\n      </div>\n  );\n}\n\n/** Render integer salary like '$1,250,343' */\n\nfunction formatSalary(salary) {\n  const digitsRev = [];\n  const salaryStr = salary.toString();\n\n  for (let i = salaryStr.length - 1; i >= 0; i--) {\n    digitsRev.push(salaryStr[i]);\n    if (i > 0 && i % 3 === 0) digitsRev.push(\",\");\n  }\n\n  return digitsRev.reverse().join(\"\");\n}\n\n\nexport default JobCard;\n"]},"metadata":{},"sourceType":"module"}