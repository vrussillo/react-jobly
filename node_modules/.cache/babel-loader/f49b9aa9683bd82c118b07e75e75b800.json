{"ast":null,"code":"import { useState, useEffect } from \"react\";\n/** Custom hook for keeping state data synced with localStorage.\n *\n * This creates `item` as state and look in localStorage for current value\n * (if not found, defaults to `firstValue`)\n *\n * When `item` changes, effect re-runs:\n * - if new state is null, removes from localStorage\n * - else, updates localStorage\n *\n * To the component, this just acts like state that is also synced to/from\n * localStorage::\n *\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\n */\n\nfunction useLocalStorage(key) {\n  let firstValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const initialValue = localStorage.getItem(key) || firstValue;\n  const [item, setItem] = useState(initialValue);\n  useEffect(function setKeyInLocalStorage() {\n    console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\n\n    if (item === null) {\n      localStorage.removeItem(key);\n    } else {\n      localStorage.setItem(key, item);\n    }\n  }, [key, item]);\n  return [item, setItem];\n}\n\nexport default useLocalStorage;","map":{"version":3,"sources":["/Users/vaughnrussillo/SpringBoard_Projects/react/react-jobly/src/hooks/useLocalStorage.js"],"names":["useState","useEffect","useLocalStorage","key","firstValue","initialValue","localStorage","getItem","item","setItem","setKeyInLocalStorage","console","debug","removeItem"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,eAAT,CAAyBC,GAAzB,EAAiD;AAAA,MAAnBC,UAAmB,uEAAN,IAAM;AAC/C,QAAMC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqBJ,GAArB,KAA6BC,UAAlD;AAEA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAACK,YAAD,CAAhC;AAEAJ,EAAAA,SAAS,CAAC,SAASS,oBAAT,GAAgC;AACxCC,IAAAA,OAAO,CAACC,KAAR,CAAc,iCAAd,EAAiD,OAAjD,EAA0DJ,IAA1D;;AAEA,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACjBF,MAAAA,YAAY,CAACO,UAAb,CAAwBV,GAAxB;AACD,KAFD,MAEO;AACLG,MAAAA,YAAY,CAACG,OAAb,CAAqBN,GAArB,EAA0BK,IAA1B;AACD;AACF,GARQ,EAQN,CAACL,GAAD,EAAMK,IAAN,CARM,CAAT;AAUA,SAAO,CAACA,IAAD,EAAOC,OAAP,CAAP;AACD;;AAED,eAAeP,eAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\n/** Custom hook for keeping state data synced with localStorage.\n *\n * This creates `item` as state and look in localStorage for current value\n * (if not found, defaults to `firstValue`)\n *\n * When `item` changes, effect re-runs:\n * - if new state is null, removes from localStorage\n * - else, updates localStorage\n *\n * To the component, this just acts like state that is also synced to/from\n * localStorage::\n *\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\n */\n\nfunction useLocalStorage(key, firstValue = null) {\n  const initialValue = localStorage.getItem(key) || firstValue;\n\n  const [item, setItem] = useState(initialValue);\n\n  useEffect(function setKeyInLocalStorage() {\n    console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\n\n    if (item === null) {\n      localStorage.removeItem(key);\n    } else {\n      localStorage.setItem(key, item);\n    }\n  }, [key, item]);\n\n  return [item, setItem];\n}\n\nexport default useLocalStorage;\n"]},"metadata":{},"sourceType":"module"}